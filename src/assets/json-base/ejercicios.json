{
  "paradigma-funcional": {
    "ejercicio-1": {
      "description": "Define una función que calcule el cuadrado de un número dado.",
      "racket": {
        "code": "(define (square x) (* x x))",
        "answer": "(square 5) ; => 25"
      },
      "ocaml": {
        "code": "let square x = x * x",
        "answer": "square 5 ;; (* => 25 *)"
      }
    },
    "ejercicio-2": {
      "description": "Crea una función que determine si un número es par.",
      "racket": {
        "code": "(define (even? x) (= (remainder x 2) 0))",
        "answer": "(even? 4) ; => #t"
      },
      "ocaml": {
        "code": "let even x = (x mod 2) = 0",
        "answer": "even 4 ;; (* => true *)"
      }
    },
    "ejercicio-3": {
      "description": "Escribe una función que sume dos números.",
      "racket": {
        "code": "(define (add a b) (+ a b))",
        "answer": "(add 3 4) ; => 7"
      },
      "ocaml": {
        "code": "let add a b = a + b",
        "answer": "add 3 4 ;; (* => 7 *)"
      }
    },
    "ejercicio-4": {
      "description": "Define una función que calcule el factorial de un número (usando un caso base).",
      "racket": {
        "code": "(define (factorial n) (if (<= n 1) 1 (* n (factorial (- n 1)))))",
        "answer": "(factorial 5) ; => 120"
      },
      "ocaml": {
        "code": "let rec factorial n = if n <= 1 then 1 else n * factorial (n - 1)",
        "answer": "factorial 5 ;; (* => 120 *)"
      }
    },
    "ejercicio-5": {
      "description": "Crea una función que devuelva el valor absoluto de un número.",
      "racket": {
        "code": "(define (abs-value x) (if (< x 0) (- x) x))",
        "answer": "(abs-value -5) ; => 5"
      },
      "ocaml": {
        "code": "let abs_value x = if x < 0 then -x else x",
        "answer": "abs_value (-5) ;; (* => 5 *)"
      }
    },
    "ejercicio-6": {
      "description": "Escribe una función que determine si un número es positivo.",
      "racket": {
        "code": "(define (positive? x) (> x 0))",
        "answer": "(positive? 3) ; => #t"
      },
      "ocaml": {
        "code": "let positive x = x > 0",
        "answer": "positive 3 ;; (* => true *)"
      }
    },
    "ejercicio-7": {
      "description": "Define una función que multiplique un número por 10.",
      "racket": {
        "code": "(define (times-ten x) (* x 10))",
        "answer": "(times-ten 5) ; => 50"
      },
      "ocaml": {
        "code": "let times_ten x = x * 10",
        "answer": "times_ten 5 ;; (* => 50 *)"
      }
    }
  },
  "expresiones": {
    "ejercicio-1": {
      "description": "Define una función que multiplique dos números enteros.",
      "racket": {
        "code": "(define (multiply a b) (* a b))",
        "answer": "(multiply 3 4) ; => 12"
      },
      "ocaml": {
        "code": "let multiply a b = a * b",
        "answer": "multiply 3 4 ;; (* => 12 *)"
      }
    },
    "ejercicio-2": {
      "description": "Crea una función que determine si un número es mayor que 10.",
      "racket": {
        "code": "(define (greater-than-ten? x) (> x 10))",
        "answer": "(greater-than-ten? 15) ; => #t"
      },
      "ocaml": {
        "code": "let greater_than_ten x = x > 10",
        "answer": "greater_than_ten 15 ;; (* => true *)"
      }
    },
    "ejercicio-3": {
      "description": "Escribe una función que reste dos números.",
      "racket": {
        "code": "(define (subtract a b) (- a b))",
        "answer": "(subtract 10 4) ; => 6"
      },
      "ocaml": {
        "code": "let subtract a b = a - b",
        "answer": "subtract 10 4 ;; (* => 6 *)"
      }
    },
    "ejercicio-4": {
      "description": "Define una función que calcule el cubo de un número.",
      "racket": {
        "code": "(define (cube x) (* x x x))",
        "answer": "(cube 3) ; => 27"
      },
      "ocaml": {
        "code": "let cube x = x * x * x",
        "answer": "cube 3 ;; (* => 27 *)"
      }
    },
    "ejercicio-5": {
      "description": "Crea una función que determine si un número es divisible por 3.",
      "racket": {
        "code": "(define (divisible-by-three? x) (= (remainder x 3) 0))",
        "answer": "(divisible-by-three? 9) ; => #t"
      },
      "ocaml": {
        "code": "let divisible_by_three x = (x mod 3) = 0",
        "answer": "divisible_by_three 9 ;; (* => true *)"
      }
    },
    "ejercicio-6": {
      "description": "Escribe una función que divida un número por 2.",
      "racket": {
        "code": "(define (divide-by-two x) (/ x 2))",
        "answer": "(divide-by-two 10) ; => 5"
      },
      "ocaml": {
        "code": "let divide_by_two x = x / 2",
        "answer": "divide_by_two 10 ;; (* => 5 *)"
      }
    },
    "ejercicio-7": {
      "description": "Define una función que convierta un booleano a su opuesto.",
      "racket": {
        "code": "(define (not-bool x) (not x))",
        "answer": "(not-bool #t) ; => #f"
      },
      "ocaml": {
        "code": "let not_bool x = not x",
        "answer": "not_bool true ;; (* => false *)"
      }
    }
  },
  "funciones": {
    "ejercicio-1": {
      "description": "Define una función que calcule el área de un rectángulo dado su base y altura.",
      "racket": {
        "code": "(define (rectangle-area base height) (* base height))",
        "answer": "(rectangle-area 5 3) ; => 15"
      },
      "ocaml": {
        "code": "let rectangle_area base height = base * height",
        "answer": "rectangle_area 5 3 ;; (* => 15 *)"
      }
    },
    "ejercicio-2": {
      "description": "Crea una función que determine si un número es múltiplo de otro.",
      "racket": {
        "code": "(define (multiple? x y) (= (remainder x y) 0))",
        "answer": "(multiple? 10 2) ; => #t"
      },
      "ocaml": {
        "code": "let multiple x y = (x mod y) = 0",
        "answer": "multiple 10 2 ;; (* => true *)"
      }
    },
    "ejercicio-3": {
      "description": "Escribe una función que calcule la potencia de un número dado una base y un exponente.",
      "racket": {
        "code": "(define (power base exp) (if (= exp 0) 1 (* base (power base (- exp 1)))))",
        "answer": "(power 2 3) ; => 8"
      },
      "ocaml": {
        "code": "let rec power base exp = if exp = 0 then 1 else base * power base (exp - 1)",
        "answer": "power 2 3 ;; (* => 8 *)"
      }
    },
    "ejercicio-4": {
      "description": "Define una función que calcule el promedio de dos números.",
      "racket": {
        "code": "(define (average a b) (/ (+ a b) 2))",
        "answer": "(average 4 6) ; => 5"
      },
      "ocaml": {
        "code": "let average a b = (a + b) / 2",
        "answer": "average 4 6 ;; (* => 5 *)"
      }
    },
    "ejercicio-5": {
      "description": "Crea una función que determine si un número está entre 1 y 100.",
      "racket": {
        "code": "(define (between-1-100? x) (and (>= x 1) (<= x 100)))",
        "answer": "(between-1-100? 50) ; => #t"
      },
      "ocaml": {
        "code": "let between_1_100 x = x >= 1 && x <= 100",
        "answer": "between_1_100 50 ;; (* => true *)"
      }
    },
    "ejercicio-6": {
      "description": "Escribe una función que calcule el área de un círculo dado su radio.",
      "racket": {
        "code": "(define (circle-area r) (* 3.14159 (* r r)))",
        "answer": "(circle-area 2) ; => 12.56636"
      },
      "ocaml": {
        "code": "let circle_area r = 3.14159 *. (r *. r)",
        "answer": "circle_area 2.0 ;; (* => 12.56636 *)"
      }
    },
    "ejercicio-7": {
      "description": "Define una función que convierta grados Celsius a Fahrenheit.",
      "racket": {
        "code": "(define (celsius-to-fahrenheit c) (+ (* c 9/5) 32))",
        "answer": "(celsius-to-fahrenheit 0) ; => 32"
      },
      "ocaml": {
        "code": "let celsius_to_fahrenheit c = (c *. 9.0 /. 5.0) +. 32.0",
        "answer": "celsius_to_fahrenheit 0.0 ;; (* => 32.0 *)"
      }
    }
  },
  "funciones-multiples": {
    "ejercicio-1": {
      "description": "Define una función que calcule el área de un triángulo dado su base y altura.",
      "racket": {
        "code": "(define (triangle-area base height) (/ (* base height) 2))",
        "answer": "(triangle-area 6 4) ; => 12"
      },
      "ocaml": {
        "code": "let triangle_area base height = (base *. height) /. 2.0",
        "answer": "triangle_area 6.0 4.0 ;; (* => 12.0 *)"
      }
    },
    "ejercicio-2": {
      "description": "Crea una función que determine si tres números están en orden ascendente.",
      "racket": {
        "code": "(define (ascending? a b c) (and (< a b) (< b c)))",
        "answer": "(ascending? 1 2 3) ; => #t"
      },
      "ocaml": {
        "code": "let ascending a b c = a < b && b < c",
        "answer": "ascending 1 2 3 ;; (* => true *)"
      }
    },
    "ejercicio-3": {
      "description": "Escribe una función que calcule la distancia entre dos puntos en un plano (x1, y1) y (x2, y2).",
      "racket": {
        "code": "(define (distance x1 y1 x2 y2) (sqrt (+ (expt (- x2 x1) 2) (expt (- y2 y1) 2))))",
        "answer": "(distance 0 0 3 4) ; => 5"
      },
      "ocaml": {
        "code": "let distance x1 y1 x2 y2 = sqrt ((x2 -. x1) ** 2.0 +. (y2 -. y1) ** 2.0)",
        "answer": "distance 0.0 0.0 3.0 4.0 ;; (* => 5.0 *)"
      }
    },
    "ejercicio-4": {
      "description": "Define una función que calcule el máximo de tres números.",
      "racket": {
        "code": "(define (max-of-three a b c) (max a (max b c)))",
        "answer": "(max-of-three 3 7 5) ; => 7"
      },
      "ocaml": {
        "code": "let max_of_three a b c = max a (max b c)",
        "answer": "max_of_three 3 7 5 ;; (* => 7 *)"
      }
    },
    "ejercicio-5": {
      "description": "Crea una función que calcule el promedio de tres números.",
      "racket": {
        "code": "(define (average-three a b c) (/ (+ a b c) 3))",
        "answer": "(average-three 4 5 6) ; => 5"
      },
      "ocaml": {
        "code": "let average_three a b c = (a + b + c) / 3",
        "answer": "average_three 4 5 6 ;; (* => 5 *)"
      }
    },
    "ejercicio-6": {
      "description": "Escribe una función que determine si tres números son todos positivos.",
      "racket": {
        "code": "(define (all-positive? a b c) (and (> a 0) (> b 0) (> c 0)))",
        "answer": "(all-positive? 1 2 3) ; => #t"
      },
      "ocaml": {
        "code": "let all_positive a b c = a > 0 && b > 0 && c > 0",
        "answer": "all_positive 1 2 3 ;; (* => true *)"
      }
    },
    "ejercicio-7": {
      "description": "Define una función que calcule el volumen de un cuboide dado largo, ancho y alto.",
      "racket": {
        "code": "(define (cuboid-volume l w h) (* l w h))",
        "answer": "(cuboid-volume 2 3 4) ; => 24"
      },
      "ocaml": {
        "code": "let cuboid_volume l w h = l *. w *. h",
        "answer": "cuboid_volume 2.0 3.0 4.0 ;; (* => 24.0 *)"
      }
    }
  },
  "condicionales": {
    "ejercicio-1": {
      "description": "Define una función que devuelva el mayor de dos números usando un condicional.",
      "racket": {
        "code": "(define (max-two a b) (if (> a b) a b))",
        "answer": "(max-two 5 3) ; => 5"
      },
      "ocaml": {
        "code": "let max_two a b = if a > b then a else b",
        "answer": "max_two 5 3 ;; (* => 5 *)"
      }
    },
    "ejercicio-2": {
      "description": "Crea una función que clasifique un número como positivo, negativo o cero.",
      "racket": {
        "code": "(define (classify-number x) (cond [(> x 0) 'positive] [(< x 0) 'negative] [else 'zero]))",
        "answer": "(classify-number 5) ; => positive"
      },
      "ocaml": {
        "code": "let classify_number x = if x > 0 then \"positive\" else if x < 0 then \"negative\" else \"zero\"",
        "answer": "classify_number 5 ;; (* => \"positive\" *)"
      }
    },
    "ejercicio-3": {
      "description": "Escribe una función que determine si un año es bisiesto.",
      "racket": {
        "code": "(define (leap-year? year) (cond [(= (remainder year 400) 0) #t] [(= (remainder year 100) 0) #f] [(= (remainder year 4) 0) #t] [else #f]))",
        "answer": "(leap-year? 2020) ; => #t"
      },
      "ocaml": {
        "code": "let leap_year year = if year mod 400 = 0 then true else if year mod 100 = 0 then false else if year mod 4 = 0 then true else false",
        "answer": "leap_year 2020 ;; (* => true *)"
      }
    },
    "ejercicio-4": {
      "description": "Define una función que devuelva el signo de un número (+1, -1, 0).",
      "racket": {
        "code": "(define (sign x) (cond [(> x 0) 1] [(< x 0) -1] [else 0]))",
        "answer": "(sign -5) ; => -1"
      },
      "ocaml": {
        "code": "let sign x = if x > 0 then 1 else if x < 0 then -1 else 0",
        "answer": "sign (-5) ;; (* => -1 *)"
      }
    },
    "ejercicio-5": {
      "description": "Crea una función que clasifique una nota (0-100) como A, B, C, D o F.",
      "racket": {
        "code": "(define (grade score) (cond [(>= score 90) 'A] [(>= score 80) 'B] [(>= score 70) 'C] [(>= score 60) 'D] [else 'F]))",
        "answer": "(grade 85) ; => B"
      },
      "ocaml": {
        "code": "let grade score = if score >= 90 then \"A\" else if score >= 80 then \"B\" else if score >= 70 then \"C\" else if score >= 60 then \"D\" else \"F\"",
        "answer": "grade 85 ;; (* => \"B\" *)"
      }
    },
    "ejercicio-6": {
      "description": "Escribe una función que determine si un número es divisible por 2 y 3.",
      "racket": {
        "code": "(define (divisible-both? x) (and (= (remainder x 2) 0) (= (remainder x 3) 0)))",
        "answer": "(divisible-both? 6) ; => #t"
      },
      "ocaml": {
        "code": "let divisible_both x = (x mod 2 = 0) && (x mod 3 = 0)",
        "answer": "divisible_both 6 ;; (* => true *)"
      }
    },
    "ejercicio-7": {
      "description": "Define una función que clasifique un triángulo por sus lados (equilátero, isósceles, escaleno).",
      "racket": {
        "code": "(define (triangle-type a b c) (cond [(and (= a b) (= b c)) 'equilateral] [(or (= a b) (= b c) (= a c)) 'isosceles] [else 'scalene]))",
        "answer": "(triangle-type 2 2 2) ; => equilateral"
      },
      "ocaml": {
        "code": "let triangle_type a b c = if a = b && b = c then \"equilateral\" else if a = b || b = c || a = c then \"isosceles\" else \"scalene\"",
        "answer": "triangle_type 2 2 2 ;; (* => \"equilateral\" *)"
      }
    }
  },
  "recursion": {
    "ejercicio-1": {
      "description": "Define una función recursiva que calcule la suma de los primeros n números naturales.",
      "racket": {
        "code": "(define (sum-n n) (if (<= n 0) 0 (+ n (sum-n (- n 1)))))",
        "answer": "(sum-n 5) ; => 15"
      },
      "ocaml": {
        "code": "let rec sum_n n = if n <= 0 then 0 else n + sum_n (n - 1)",
        "answer": "sum_n 5 ;; (* => 15 *)"
      }
    },
    "ejercicio-2": {
      "description": "Crea una función recursiva que calcule la potencia de un número.",
      "racket": {
        "code": "(define (power base exp) (if (= exp 0) 1 (* base (power base (- exp 1)))))",
        "answer": "(power 2 3) ; => 8"
      },
      "ocaml": {
        "code": "let rec power base exp = if exp = 0 then 1 else base * power base (exp - 1)",
        "answer": "power 2 3 ;; (* => 8 *)"
      }
    },
    "ejercicio-3": {
      "description": "Escribe una función recursiva que calcule el factorial de un número.",
      "racket": {
        "code": "(define (factorial n) (if (<= n 1) 1 (* n (factorial (- n 1)))))",
        "answer": "(factorial 5) ; => 120"
      },
      "ocaml": {
        "code": "let rec factorial n = if n <= 1 then 1 else n * factorial (n - 1)",
        "answer": "factorial 5 ;; (* => 120 *)"
      }
    },
    "ejercicio-4": {
      "description": "Define una función recursiva que calcule el n-ésimo número de Fibonacci.",
      "racket": {
        "code": "(define (fibonacci n) (if (<= n 1) n (+ (fibonacci (- n 1)) (fibonacci (- n 2)))))",
        "answer": "(fibonacci 6) ; => 8"
      },
      "ocaml": {
        "code": "let rec fibonacci n = if n <= 1 then n else fibonacci (n - 1) + fibonacci (n - 2)",
        "answer": "fibonacci 6 ;; (* => 8 *)"
      }
    },
    "ejercicio-5": {
      "description": "Crea una función recursiva que sume los dígitos de un número.",
      "racket": {
        "code": "(define (sum-digits n) (if (< n 10) n (+ (remainder n 10) (sum-digits (quotient n 10)))))",
        "answer": "(sum-digits 123) ; => 6"
      },
      "ocaml": {
        "code": "let rec sum_digits n = if n < 10 then n else (n mod 10) + sum_digits (n / 10)",
        "answer": "sum_digits 123 ;; (* => 6 *)"
      }
    },
    "ejercicio-6": {
      "description": "Escribe una función recursiva que calcule el producto de los primeros n números impares.",
      "racket": {
        "code": "(define (product-odds n) (if (<= n 0) 1 (* (+ (* 2 n) -1) (product-odds (- n 1)))))",
        "answer": "(product-odds 3) ; => 15"
      },
      "ocaml": {
        "code": "let rec product_odds n = if n <= 0 then 1 else (2 * n - 1) * product_odds (n - 1)",
        "answer": "product_odds 3 ;; (* => 15 *)"
      }
    },
    "ejercicio-7": {
      "description": "Define una función recursiva que cuente los dígitos de un número.",
      "racket": {
        "code": "(define (count-digits n) (if (< n 10) 1 (+ 1 (count-digits (quotient n 10)))))",
        "answer": "(count-digits 1234) ; => 4"
      },
      "ocaml": {
        "code": "let rec count_digits n = if n < 10 then 1 else 1 + count_digits (n / 10)",
        "answer": "count_digits 1234 ;; (* => 4 *)"
      }
    }
  },
  "listas": {
    "ejercicio-1": {
      "description": "Define una función que calcule la longitud de una lista.",
      "racket": {
        "code": "(define (length lst) (if (empty? lst) 0 (+ 1 (length (rest lst)))))",
        "answer": "(length '(1 2 3)) ; => 3"
      },
      "ocaml": {
        "code": "let rec length lst = if lst = [] then 0 else 1 + length (List.tl lst)",
        "answer": "length [1; 2; 3] ;; (* => 3 *)"
      }
    },
    "ejercicio-2": {
      "description": "Crea una función que devuelva el primer elemento de una lista.",
      "racket": {
        "code": "(define (first-element lst) (if (empty? lst) null (first lst)))",
        "answer": "(first-element '(1 2 3)) ; => 1"
      },
      "ocaml": {
        "code": "let first_element lst = if lst = [] then None else Some (List.hd lst)",
        "answer": "first_element [1; 2; 3] ;; (* => Some 1 *)"
      }
    },
    "ejercicio-3": {
      "description": "Escribe una función que devuelva el último elemento de una lista.",
      "racket": {
        "code": "(define (last-element lst) (if (empty? (rest lst)) (first lst) (last-element (rest lst))))",
        "answer": "(last-element '(1 2 3)) ; => 3"
      },
      "ocaml": {
        "code": "let rec last_element lst = if List.tl lst = [] then List.hd lst else last_element (List.tl lst)",
        "answer": "last_element [1; 2; 3] ;; (* => 3 *)"
      }
    },
    "ejercicio-4": {
      "description": "Define una función que concatene dos listas.",
      "racket": {
        "code": "(define (append lst1 lst2) (if (empty? lst1) lst2 (cons (first lst1) (append (rest lst1) lst2))))",
        "answer": "(append '(1 2) '(3 4)) ; => (1 2 3 4)"
      },
      "ocaml": {
        "code": "let rec append lst1 lst2 = if lst1 = [] then lst2 else List.hd lst1 :: append (List.tl lst1) lst2",
        "answer": "append [1; 2] [3; 4] ;; (* => [1; 2; 3; 4] *)"
      }
    },
    "ejercicio-5": {
      "description": "Crea una función que devuelva una lista sin su primer elemento.",
      "racket": {
        "code": "(define (rest-list lst) (if (empty? lst) null (rest lst)))",
        "answer": "(rest-list '(1 2 3)) ; => (2 3)"
      },
      "ocaml": {
        "code": "let rest_list lst = if lst = [] then [] else List.tl lst",
        "answer": "rest_list [1; 2; 3] ;; (* => [2; 3] *)"
      }
    },
    "ejercicio-6": {
      "description": "Escribe una función que determine si una lista está vacía.",
      "racket": {
        "code": "(define (empty-list? lst) (empty? lst))",
        "answer": "(empty-list? '()) ; => #t"
      },
      "ocaml": {
        "code": "let empty_list lst = lst = []",
        "answer": "empty_list [] ;; (* => true *)"
      }
    },
    "ejercicio-7": {
      "description": "Define una función que devuelva una lista con un elemento añadido al inicio.",
      "racket": {
        "code": "(define (cons-element x lst) (cons x lst))",
        "answer": "(cons-element 0 '(1 2 3)) ; => (0 1 2 3)"
      },
      "ocaml": {
        "code": "let cons_element x lst = x :: lst",
        "answer": "cons_element 0 [1; 2; 3] ;; (* => [0; 1; 2; 3] *)"
      }
    }
  },
  "funciones-orden-superior": {
    "ejercicio-1": {
      "description": "Define una función que use map para duplicar cada elemento de una lista.",
      "racket": {
        "code": "(define (double-list lst) (map (lambda (x) (* x 2)) lst))",
        "answer": "(double-list '(1 2 3)) ; => (2 4 6)"
      },
      "ocaml": {
        "code": "let double_list lst = List.map (fun x -> x * 2) lst",
        "answer": "double_list [1; 2; 3] ;; (* => [2; 4; 6] *)"
      }
    },
    "ejercicio-2": {
      "description": "Crea una función que use filter para obtener los números pares de una lista.",
      "racket": {
        "code": "(define (even-numbers lst) (filter (lambda (x) (= (remainder x 2) 0)) lst))",
        "answer": "(even-numbers '(1 2 3 4)) ; => (2 4)"
      },
      "ocaml": {
        "code": "let even_numbers lst = List.filter (fun x -> x mod 2 = 0) lst",
        "answer": "even_numbers [1; 2; 3; 4] ;; (* => [2; 4] *)"
      }
    },
    "ejercicio-3": {
      "description": "Escribe una función que use map para calcular el cuadrado de cada elemento de una lista.",
      "racket": {
        "code": "(define (square-list lst) (map (lambda (x) (* x x)) lst))",
        "answer": "(square-list '(1 2 3)) ; => (1 4 9)"
      },
      "ocaml": {
        "code": "let square_list lst = List.map (fun x -> x * x) lst",
        "answer": "square_list [1; 2; 3] ;; (* => [1; 4; 9] *)"
      }
    },
    "ejercicio-4": {
      "description": "Define una función que use filter para obtener los números mayores que 10 de una lista.",
      "racket": {
        "code": "(define (greater-than-ten lst) (filter (lambda (x) (> x 10)) lst))",
        "answer": "(greater-than-ten '(5 12 8 15)) ; => (12 15)"
      },
      "ocaml": {
        "code": "let greater_than_ten lst = List.filter (fun x -> x > 10) lst",
        "answer": "greater_than_ten [5; 12; 8; 15] ;; (* => [12; 15] *)"
      }
    },
    "ejercicio-5": {
      "description": "Crea una función que use map para convertir una lista de números en sus valores absolutos.",
      "racket": {
        "code": "(define (abs-list lst) (map (lambda (x) (if (< x 0) (- x) x)) lst))",
        "answer": "(abs-list '(-1 2 -3)) ; => (1 2 3)"
      },
      "ocaml": {
        "code": "let abs_list lst = List.map (fun x -> if x < 0 then -x else x) lst",
        "answer": "abs_list [-1; 2; -3] ;; (* => [1; 2; 3] *)"
      }
    },
    "ejercicio-6": {
      "description": "Escribe una función que use filter para obtener los números positivos de una lista.",
      "racket": {
        "code": "(define (positive-numbers lst) (filter (lambda (x) (> x 0)) lst))",
        "answer": "(positive-numbers '(-1 2 -3 4)) ; => (2 4)"
      },
      "ocaml": {
        "code": "let positive_numbers lst = List.filter (fun x -> x > 0) lst",
        "answer": "positive_numbers [-1; 2; -3; 4] ;; (* => [2; 4] *)"
      }
    },
    "ejercicio-7": {
      "description": "Define una función que use map para añadir 1 a cada elemento de una lista.",
      "racket": {
        "code": "(define (increment-list lst) (map (lambda (x) (+ x 1)) lst))",
        "answer": "(increment-list '(1 2 3)) ; => (2 3 4)"
      },
      "ocaml": {
        "code": "let increment_list lst = List.map (fun x -> x + 1) lst",
        "answer": "increment_list [1; 2; 3] ;; (* => [2; 3; 4] *)"
      }
    }
  },
  "tipos-datos-simples": {
    "ejercicio-1": {
      "description": "Define una función que cree una tupla con dos números y devuelva su suma.",
      "racket": {
        "code": "(define (sum-tuple t) (+ (car t) (cdr t)))",
        "answer": "(sum-tuple (cons 3 4)) ; => 7"
      },
      "ocaml": {
        "code": "let sum_tuple (a, b) = a + b",
        "answer": "sum_tuple (3, 4) ;; (* => 7 *)"
      }
    },
    "ejercicio-2": {
      "description": "Crea una función que devuelva el primer elemento de una tupla.",
      "racket": {
        "code": "(define (first-of-tuple t) (car t))",
        "answer": "(first-of-tuple (cons 1 2)) ; => 1"
      },
      "ocaml": {
        "code": "let first_of_tuple (a, _) = a",
        "answer": "first_of_tuple (1, 2) ;; (* => 1 *)"
      }
    },
    "ejercicio-3": {
      "description": "Escribe una función que cree un registro con nombre y edad, y devuelva la edad.",
      "racket": {
        "code": "(struct person (name age)) (define (get-age p) (person-age p))",
        "answer": "(get-age (person \"Alice\" 30)) ; => 30"
      },
      "ocaml": {
        "code": "type person = { name: string; age: int } let get_age p = p.age",
        "answer": "let p = { name = \"Alice\"; age = 30 } in get_age p ;; (* => 30 *)"
      }
    },
    "ejercicio-4": {
      "description": "Define una función que cree una tupla con tres números y devuelva su producto.",
      "racket": {
        "code": "(define (product-triple t) (* (car t) (* (cadr t) (caddr t))))",
        "answer": "(product-triple (list 2 3 4)) ; => 24"
      },
      "ocaml": {
        "code": "let product_triple (a, b, c) = a * b * c",
        "answer": "product_triple (2, 3, 4) ;; (* => 24 *)"
      }
    },
    "ejercicio-5": {
      "description": "Crea una función que verifique si dos tuplas tienen los mismos elementos.",
      "racket": {
        "code": "(define (equal-tuples? t1 t2) (and (= (car t1) (car t2)) (= (cdr t1) (cdr t2))))",
        "answer": "(equal-tuples? (cons 1 2) (cons 1 2)) ; => #t"
      },
      "ocaml": {
        "code": "let equal_tuples (a1, b1) (a2, b2) = a1 = a2 && b1 = b2",
        "answer": "equal_tuples (1, 2) (1, 2) ;; (* => true *)"
      }
    },
    "ejercicio-6": {
      "description": "Escribe una función que devuelva el nombre de un registro de persona.",
      "racket": {
        "code": "(struct person (name age)) (define (get-name p) (person-name p))",
        "answer": "(get-name (person \"Bob\" 25)) ; => \"Bob\""
      },
      "ocaml": {
        "code": "type person = { name: string; age: int } let get_name p = p.name",
        "answer": "let p = { name = \"Bob\"; age = 25 } in get_name p ;; (* => \"Bob\" *)"
      }
    },
    "ejercicio-7": {
      "description": "Define una función que cree una tupla a partir de un número y su cuadrado.",
      "racket": {
        "code": "(define (number-square-tuple n) (cons n (* n n)))",
        "answer": "(number-square-tuple 5) ; => (5 . 25)"
      },
      "ocaml": {
        "code": "let number_square_tuple n = (n, n * n)",
        "answer": "number_square_tuple 5 ;; (* => (5, 25) *)"
      }
    }
  },
  "cadenas-y-caracteres": {
    "ejercicio-1": {
      "description": "Define una función que devuelva la longitud de una cadena.",
      "racket": {
        "code": "(define (string-length str) (string-length str))",
        "answer": "(string-length \"hello\") ; => 5"
      },
      "ocaml": {
        "code": "let string_length str = String.length str",
        "answer": "string_length \"hello\" ;; (* => 5 *)"
      }
    },
    "ejercicio-2": {
      "description": "Crea una función que concatene dos cadenas.",
      "racket": {
        "code": "(define (concat-strings s1 s2) (string-append s1 s2))",
        "answer": "(concat-strings \"hello\" \"world\") ; => \"helloworld\""
      },
      "ocaml": {
        "code": "let concat_strings s1 s2 = s1 ^ s2",
        "answer": "concat_strings \"hello\" \"world\" ;; (* => \"helloworld\" *)"
      }
    },
    "ejercicio-3": {
      "description": "Escribe una función que devuelva el primer carácter de una cadena.",
      "racket": {
        "code": "(define (first-char str) (string-ref str 0))",
        "answer": "(first-char \"hello\") ; => #\\h"
      },
      "ocaml": {
        "code": "let first_char str = if str = \"\" then None else Some (String.get str 0)",
        "answer": "first_char \"hello\" ;; (* => Some 'h' *)"
      }
    },
    "ejercicio-4": {
      "description": "Define una función que convierta una cadena a mayúsculas.",
      "racket": {
        "code": "(define (to-upper str) (string-upcase str))",
        "answer": "(to-upper \"hello\") ; => \"HELLO\""
      },
      "ocaml": {
        "code": "let to_upper str = String.uppercase_ascii str",
        "answer": "to_upper \"hello\" ;; (* => \"HELLO\" *)"
      }
    },
    "ejercicio-5": {
      "description": "Crea una función que verifique si una cadena está vacía.",
      "racket": {
        "code": "(define (empty-string? str) (string=? str \"\"))",
        "answer": "(empty-string? \"\") ; => #t"
      },
      "ocaml": {
        "code": "let empty_string str = str = \"\"",
        "answer": "empty_string \"\" ;; (* => true *)"
      }
    },
    "ejercicio-6": {
      "description": "Escribe una función que extraiga una subcadena desde una posición dada.",
      "racket": {
        "code": "(define (substring-from str start len) (substring str start (+ start len)))",
        "answer": "(substring-from \"hello\" 1 3) ; => \"ell\""
      },
      "ocaml": {
        "code": "let substring_from str start len = String.sub str start len",
        "answer": "substring_from \"hello\" 1 3 ;; (* => \"ell\" *)"
      }
    },
    "ejercicio-7": {
      "description": "Define una función que cuente las vocales en una cadena.",
      "racket": {
        "code": "(define (count-vowels str) (length (filter (lambda (c) (member c '(#\\a #\\e #\\i #\\o #\\u))) (string->list str))))",
        "answer": "(count-vowels \"hello\") ; => 2"
      },
      "ocaml": {
        "code": "let count_vowels str = String.fold_left (fun acc c -> if List.mem c ['a'; 'e'; 'i'; 'o'; 'u'] then acc + 1 else acc) 0 str",
        "answer": "count_vowels \"hello\" ;; (* => 2 *)"
      }
    }
  },
  "composicion-de-funciones": {
    "ejercicio-1": {
      "description": "Define una función que componga dos funciones: cuadrado y suma 1.",
      "racket": {
        "code": "(define (compose-square-plus-one x) ((compose (lambda (x) (* x x)) (lambda (x) (+ x 1))) x))",
        "answer": "(compose-square-plus-one 2) ; => 9"
      },
      "ocaml": {
        "code": "let compose_square_plus_one x = (fun x -> x * x) ((fun x -> x + 1) x)",
        "answer": "compose_square_plus_one 2 ;; (* => 9 *)"
      }
    },
    "ejercicio-2": {
      "description": "Crea una función que componga una función que duplique y una que reste 3.",
      "racket": {
        "code": "(define (compose-double-minus-three x) ((compose (lambda (x) (* x 2)) (lambda (x) (- x 3))) x))",
        "answer": "(compose-double-minus-three 5) ; => 4"
      },
      "ocaml": {
        "code": "let compose_double_minus_three x = (fun x -> x * 2) ((fun x -> x - 3) x)",
        "answer": "compose_double_minus_three 5 ;; (* => 4 *)"
      }
    },
    "ejercicio-3": {
      "description": "Escribe una función que componga tres funciones: cuadrado, suma 1 y duplicar.",
      "racket": {
        "code": "(define (compose-three x) ((compose (lambda (x) (* x x)) (compose (lambda (x) (+ x 1)) (lambda (x) (* x 2)))) x))",
        "answer": "(compose-three 2) ; => 25"
      },
      "ocaml": {
        "code": "let compose_three x = (fun x -> x * x) ((fun x -> x + 1) ((fun x -> x * 2) x))",
        "answer": "compose_three 2 ;; (* => 25 *)"
      }
    },
    "ejercicio-4": {
      "description": "Define una función que componga una función que calcule el valor absoluto y otra que sume 5.",
      "racket": {
        "code": "(define (compose-abs-plus-five x) ((compose (lambda (x) (if (< x 0) (- x) x)) (lambda (x) (+ x 5))) x))",
        "answer": "(compose-abs-plus-five -3) ; => 8"
      },
      "ocaml": {
        "code": "let compose_abs_plus_five x = (fun x -> if x < 0 then -x else x) ((fun x -> x + 5) x)",
        "answer": "compose_abs_plus_five (-3) ;; (* => 8 *)"
      }
    },
    "ejercicio-5": {
      "description": "Crea una función que componga una función que triplique y una que reste 1.",
      "racket": {
        "code": "(define (compose-triple-minus-one x) ((compose (lambda (x) (* x 3)) (lambda (x) (- x 1))) x))",
        "answer": "(compose-triple-minus-one 3) ; => 6"
      },
      "ocaml": {
        "code": "let compose_triple_minus_one x = (fun x -> x * 3) ((fun x -> x - 1) x)",
        "answer": "compose_triple_minus_one 3 ;; (* => 6 *)"
      }
    },
    "ejercicio-6": {
      "description": "Escribe una función que componga una función que calcule el cuadrado y otra que determine si es par.",
      "racket": {
        "code": "(define (compose-square-even x) ((compose (lambda (x) (= (remainder x 2) 0)) (lambda (x) (* x x))) x))",
        "answer": "(compose-square-even 2) ; => #t"
      },
      "ocaml": {
        "code": "let compose_square_even x = (fun x -> x mod 2 = 0) ((fun x -> x * x) x)",
        "answer": "compose_square_even 2 ;; (* => true *)"
      }
    },
    "ejercicio-7": {
      "description": "Define una función que componga una función que duplique y otra que calcule el valor absoluto.",
      "racket": {
        "code": "(define (compose-double-abs x) ((compose (lambda (x) (* x 2)) (lambda (x) (if (< x 0) (- x) x))) x))",
        "answer": "(compose-double-abs -3) ; => 6"
      },
      "ocaml": {
        "code": "let compose_double_abs x = (fun x -> x * 2) ((fun x -> if x < 0 then -x else x) x)",
        "answer": "compose_double_abs (-3) ;; (* => 6 *)"
      }
    }
  },
  "procesamiento-listas": {
    "ejercicio-1": {
      "description": "Define una función que sume todos los elementos de una lista usando recursión.",
      "racket": {
        "code": "(define (sum-list lst) (if (empty? lst) 0 (+ (first lst) (sum-list (rest lst)))))",
        "answer": "(sum-list '(1 2 3)) ; => 6"
      },
      "ocaml": {
        "code": "let rec sum_list lst = if lst = [] then 0 else List.hd lst + sum_list (List.tl lst)",
        "answer": "sum_list [1; 2; 3] ;; (* => 6 *)"
      }
    },
    "ejercicio-2": {
      "description": "Crea una función que use map para triplicar los elementos de una lista.",
      "racket": {
        "code": "(define (triple-list lst) (map (lambda (x) (* x 3)) lst))",
        "answer": "(triple-list '(1 2 3)) ; => (3 6 9)"
      },
      "ocaml": {
        "code": "let triple_list lst = List.map (fun x -> x * 3) lst",
        "answer": "triple_list [1; 2; 3] ;; (* => [3; 6; 9] *)"
      }
    },
    "ejercicio-3": {
      "description": "Escribe una función que use filter para obtener los números impares de una lista.",
      "racket": {
        "code": "(define (odd-numbers lst) (filter (lambda (x) (= (remainder x 2) 1)) lst))",
        "answer": "(odd-numbers '(1 2 3 4)) ; => (1 3)"
      },
      "ocaml": {
        "code": "let odd_numbers lst = List.filter (fun x -> x mod 2 = 1) lst",
        "answer": "odd_numbers [1; 2; 3; 4] ;; (* => [1; 3] *)"
      }
    },
    "ejercicio-4": {
      "description": "Define una función recursiva que invierta una lista.",
      "racket": {
        "code": "(define (reverse-list lst) (if (empty? lst) '() (append (reverse-list (rest lst)) (list (first lst)))))",
        "answer": "(reverse-list '(1 2 3)) ; => (3 2 1)"
      },
      "ocaml": {
        "code": "let rec reverse_list lst = if lst = [] then [] else reverse_list (List.tl lst) @ [List.hd lst]",
        "answer": "reverse_list [1; 2; 3] ;; (* => [3; 2; 1] *)"
      }
    },
    "ejercicio-5": {
      "description": "Crea una función que use map y filter para obtener los cuadrados de los números pares de una lista.",
      "racket": {
        "code": "(define (square-evens lst) (map (lambda (x) (* x x)) (filter (lambda (x) (= (remainder x 2) 0)) lst)))",
        "answer": "(square-evens '(1 2 3 4)) ; => (4 16)"
      },
      "ocaml": {
        "code": "let square_evens lst = List.map (fun x -> x * x) (List.filter (fun x -> x mod 2 = 0) lst)",
        "answer": "square_evens [1; 2; 3; 4] ;; (* => [4; 16] *)"
      }
    },
    "ejercicio-6": {
      "description": "Escribe una función recursiva que cuente los elementos mayores que 5 en una lista.",
      "racket": {
        "code": "(define (count-greater-five lst) (if (empty? lst) 0 (+ (if (> (first lst) 5) 1 0) (count-greater-five (rest lst)))))",
        "answer": "(count-greater-five '(3 6 2 7)) ; => 2"
      },
      "ocaml": {
        "code": "let rec count_greater_five lst = if lst = [] then 0 else (if List.hd lst > 5 then 1 else 0) + count_greater_five (List.tl lst)",
        "answer": "count_greater_five [3; 6; 2; 7] ;; (* => 2 *)"
      }
    },
    "ejercicio-7": {
      "description": "Define una función que combine map y filter para obtener los cubos de los números mayores que 3.",
      "racket": {
        "code": "(define (cube-greater-three lst) (map (lambda (x) (* x x x)) (filter (lambda (x) (> x 3)) lst)))",
        "answer": "(cube-greater-three '(1 2 4 5)) ; => (64 125)"
      },
      "ocaml": {
        "code": "let cube_greater_three lst = List.map (fun x -> x * x * x) (List.filter (fun x -> x > 3) lst)",
        "answer": "cube_greater_three [1; 2; 4; 5] ;; (* => [64; 125] *)"
      }
    }
  }
}
