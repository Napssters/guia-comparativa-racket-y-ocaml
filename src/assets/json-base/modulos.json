[
  {
    "title": "1. Introducción al paradigma funcional",
    "description": "Explora los fundamentos del paradigma funcional en Racket y OCaml, comprendiendo conceptos clave como funciones puras, expresiones e inmutabilidad, y sus diferencias con otros paradigmas de programación.",
    "img": "paradigma-funcional.jpg",
    "page": "paradigma-funcional",
    "difficulty": "Principiante"
  },
  {
    "title": "2. Expresiones y valores básicos",
    "description": "Aprende a trabajar con tipos de datos primitivos como números, booleanos, caracteres y cadenas en Racket y OCaml, explorando operadores aritméticos y lógicos para realizar operaciones básicas.",
    "img": "expresiones.jpg",
    "page": "expresiones",
    "difficulty": "Principiante"
  },
  {
    "title": "3. Definición y uso de funciones",
    "description": "Domina la creación y uso de funciones en Racket y OCaml, incluyendo la sintaxis para definir parámetros y manejar valores de retorno, con un enfoque práctico en ambos lenguajes.",
    "img": "funciones.jpg",
    "page": "funciones",
    "difficulty": "Principiante"
  },
  {
    "title": "4. Funciones con múltiples parámetros",
    "description": "Profundiza en la definición y uso de funciones con múltiples parámetros en Racket y OCaml, aprendiendo cómo extender la funcionalidad básica para resolver problemas más complejos.",
    "img": "funciones-multiples.jpg",
    "page": "funciones-multiples",
    "difficulty": "Medio"
  },
  {
    "title": "5. Condicionales en programación funcional",
    "description": "Asimila el uso de estructuras condicionales como `if` y `cond` en Racket y OCaml, comprendiendo cómo tomar decisiones en un enfoque funcional puro.",
    "img": "condicionales.jpg",
    "page": "condicionales",
    "difficulty": "Medio"
  },
  {
    "title": "6. Introducción a la recursión",
    "description": "Descubre el concepto de recursión en Racket y OCaml, aprendiendo a diseñar funciones con casos base y casos recursivos para resolver problemas de manera iterativa sin bucles tradicionales.",
    "img": "recursion.jpg",
    "page": "recursion",
    "difficulty": "Medio"
  },
  {
    "title": "7. Listas y operaciones básicas",
    "description": "Explora la creación y manipulación de listas en Racket y OCaml, utilizando funciones básicas para trabajar con colecciones de datos de manera efectiva.",
    "img": "listas.jpg",
    "page": "listas",
    "difficulty": "Medio"
  },
  {
    "title": "8. Funciones de orden superior básicas",
    "description": "Aprende a utilizar funciones de orden superior como `map` y `filter` en Racket y OCaml, aplicando funciones a colecciones de datos para transformar y filtrar elementos.",
    "img": "funciones-orden-superior.jpg",
    "page": "funciones-orden-superior",
    "difficulty": "Avanzado"
  },
  {
    "title": "9. Tipos de datos simples",
    "description": "Comprende cómo trabajar con tuplas y registros en Racket y OCaml, agrupando datos relacionados para estructurar información de manera clara y funcional.",
    "img": "tipos-datos-simples.jpg",
    "page": "tipos-datos-simples",
    "difficulty": "Avanzado"
  },
  {
    "title": "10. Manejo de cadenas y caracteres",
    "description": "Entiende cómo realizar operaciones básicas con cadenas y caracteres en Racket y OCaml, aprendiendo técnicas para manipular texto de forma eficiente.",
    "img": "cadenas-y-caracteres.jpg",
    "page": "cadenas-y-caracteres",
    "difficulty": "Medio"
  },
  {
    "title": "11. Composición de funciones",
    "description": "Descubre cómo combinar funciones en Racket y OCaml mediante la composición, creando nuevas funcionalidades a partir de funciones existentes con un enfoque práctico.",
    "img": "composicion-de-funciones.jpg",
    "page": "composicion-de-funciones",
    "difficulty": "Avanzado"
  },
  {
    "title": "12. Aplicación práctica: Procesamiento de listas",
    "description": "Aplica de forma integrada conceptos de recursión, map y filter en Racket y OCaml para resolver problemas comunes relacionados con el procesamiento de listas.",
    "img": "procesamiento-listas.jpg",
    "page": "procesamiento-listas",
    "difficulty": "Avanzado"
  },
  {
    "title": "13. Práctica OCaml",
    "description": "Realiza una prueba final para consolidar los conocimientos adquiridos en OCaml, aplicando conceptos funcionales en ejercicios prácticos.",
    "img": "practica-ocaml.jpg",
    "page": "practica-ocaml",
    "difficulty": "Elemental"
  },
  {
    "title": "14. Práctica Racket",
    "description": "Realiza una prueba final para validar los conocimientos adquiridos en Racket, resolviendo problemas que integran los conceptos funcionales aprendidos.",
    "img": "practica-racket.jpg",
    "page": "practica-racket",
    "difficulty": "Elemental"
  }
]
