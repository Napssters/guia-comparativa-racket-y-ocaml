{
  "racket": {
    "practica-1": {
      "titulo": "Itinerario de Viaje de Lupe",
      "descripcion": "Lupe planea un tour por Italia con una lista de ciudades: '(Roma Milano Venecia Florencia)' y costos asociados en euros: '(150 200 180 120)'. Escribe una función en Racket llamada 'costo-total-viaje' que tome estas dos listas y calcule la suma total de los costos. Usa recursión: verifica si las listas están vacías con 'null?', accede al primer costo con 'car', y recursa con 'cdr'. Usa la operación '+' para sumar y maneja el caso base retornando 0 si ambas listas están vacías. Prueba con las listas dadas para obtener el gasto total.",
      "respuesta": "650",
      "codigo_ejemplo": "(define (longitud-lista lst)\n  (if (null? lst)\n      0\n      (+ 1 (longitud-lista (cdr lst)))\n  )\n)"
    },
    "practica-2": {
      "titulo": "Lista de Invitados a la Boda de Lupe y Juan",
      "descripcion": "Lupe se casó con Juan en Roma y tienen una lista de invitados: '(Ana Pedro Maria Carlos Sofia)' con valores de regalos en euros: '(50 100 75 120 80)'. Crea una función 'invitados-con-regalos-caros' que devuelva una lista de los nombres de los invitados cuyos regalos cuesten más de 80 euros. Usa recursión: verifica con '>' si el valor (car) es mayor a 80, usa 'cons' para construir la lista resultante, y recursa con 'cdr'. Usa 'if' y 'define'. Prueba con las listas dadas.",
      "respuesta": "(Pedro Carlos)",
      "codigo_ejemplo": "(define (filtrar-positivos nums)\n  (if (null? nums)\n      '()\n      (if (>= (car nums) 0)\n          (cons (car nums) (filtrar-positivos (cdr nums)))\n          (filtrar-positivos (cdr nums))\n      )\n   )\n)"
    },
    "practica-3": {
      "titulo": "Gastos Mensuales de la Pareja",
      "descripcion": "Lupe y Juan registran sus gastos mensuales: '(alquiler comida transporte entretenimiento)' con valores '(800 300 150 200)'. Implementa una función 'gasto-promedio' que calcule el promedio de los gastos. Usa una función auxiliar recursiva para sumar los valores, y divídela por la longitud de la lista (usa 'length'). Maneja listas vacías retornando 0. Usa '+', '/', y 'define'. Prueba con la lista de gastos.",
      "respuesta": "362.5",
      "codigo_ejemplo": "(define (suma-pares lst)\n  (if (null? lst)\n      0\n      (if (even? (car lst))\n          (+ (car lst) (suma-pares (cdr lst)))\n          (suma-pares (cdr lst))\n      )\n   )\n)"
    }
  },
  "ocaml": {
    "practica-1": {
      "titulo": "Itinerario de Viaje de Lupe",
      "descripcion": "Lupe planea un tour por Italia con ciudades: [\"Roma\"; \"Milano\"; \"Venecia\"; \"Florencia\"] y costos: [150; 200; 180; 120]. Escribe una función 'costo_total_viaje' que sume los costos usando pattern matching: para [], [] retorna 0; para h1 :: t1, h2 :: t2 suma h2 + recursión. Usa 'let rec' y la operación '+' para sumar. Prueba con las listas dadas.",
      "respuesta": "650",
      "codigo_ejemplo": "let rec longitud_lista = function\n  | [] -> 0\n  | _ :: t -> 1 + longitud_lista t;;"
    },
    "practica-2": {
      "titulo": "Lista de Invitados a la Boda de Lupe y Juan",
      "descripcion": "Lupe y Juan tienen invitados: [\"Ana\"; \"Pedro\"; \"Maria\"; \"Carlos\"; \"Sofia\"] con valores de regalos: [50; 100; 75; 120; 80]. Crea una función 'invitados_con_regalos_caros' que filtre los nombres de invitados con regalos >80 usando pattern matching: para [], [] retorna []; para h1 :: t1, h2 :: t2 si h2 >80 agrega h1, else recursa. Usa 'let rec'. Prueba con las listas.",
      "respuesta": "[\"Pedro\"; \"Carlos\"]",
      "codigo_ejemplo": "let rec filtrar_positivos = function\n  | [] -> []\n  | h :: t -> if h >= 0 then h :: filtrar_positivos t else filtrar_positivos t;;"
    },
    "practica-3": {
      "titulo": "Gastos Mensuales de la Pareja",
      "descripcion": "Lupe y Juan tienen gastos mensuales: [800; 300; 150; 200]. Implementa una función 'gasto_promedio' que sume los valores con una auxiliar 'suma_gastos' (usando pattern matching: [] -> 0, h :: t -> h + recursión) y divida por List.length. Usa 'let rec', '+', y '/.' para aritmética. Prueba con la lista de gastos.",
      "respuesta": "362.5",
      "codigo_ejemplo": "let rec suma_pares = function\n  | [] -> 0\n  | h :: t -> if h mod 2 = 0 then h + suma_pares t else suma_pares t;;"
    }
  }
}
