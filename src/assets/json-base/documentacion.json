[
  {
    "paradigma-funcional": {
      "title": "1. Introducción al paradigma funcional",
      "description": "El paradigma funcional es una forma de pensar y resolver problemas utilizando funciones, como si fueran recetas de cocina que siempre producen el mismo resultado si usas los mismos ingredientes. En este módulo, aprenderás los fundamentos de este enfoque en los lenguajes Racket y OCaml, entendiendo conceptos como funciones puras (que no cambian nada fuera de ellas), expresiones (instrucciones que generan un valor) y la inmutabilidad (datos que no cambian una vez creados). Comparado con otros estilos de programación, el paradigma funcional es como seguir una receta paso a paso sin improvisar, asegurando resultados predecibles. Imagina que eres alguien que nunca ha usado una computadora para crear instrucciones automáticas, como un niño que juega con bloques de construcción. Aquí, aprenderás paso a paso, usando ejemplos de la vida diaria, como cocinar o organizar tu habitación, para que entiendas cómo estas ideas funcionan sin necesidad de conocimiento técnico previo. Por ejemplo, piensa en cómo sigues una rutina diaria: cada parte es simple, pero juntas forman algo útil. Esto es similar a cómo se construyen los programas en estos lenguajes, asegurando que todo sea confiable y fácil de seguir.",
      "learning_objectives": [
        "Comprender qué es el paradigma funcional y cómo se diferencia de otros enfoques.",
        "Identificar los conceptos de funciones puras, expresiones e inmutabilidad.",
        "Reconocer las ventajas de usar Racket y OCaml para programar funcionalmente."
      ],
      "key_concepts": [
        "Paradigma funcional",
        "Funciones puras",
        "Inmutabilidad",
        "Expresiones"
      ],
      "subsections": [
        {
          "title": "Qué es el paradigma funcional",
          "content": "Imagina que estás organizando una fiesta y cada invitado trae un plato según una receta específica. El paradigma funcional es como asegurarte de que cada receta (función) siempre produzca el mismo plato (resultado) si usas los mismos ingredientes (entradas). En Racket y OCaml, las funciones son el corazón del programa, y se diseñan para ser predecibles y no alterar otras partes del programa, a diferencia de otros estilos donde las instrucciones pueden cambiar cosas inesperadamente. Para alguien que no sabe nada de tecnología, esto es como aprender a usar un juguete nuevo: al principio parece complicado, pero con ejemplos simples como contar juguetes o agrupar colores, verás cómo se aplica. Recuerda, no necesitas saber de computadoras; solo imagina escenarios cotidianos donde repites acciones o tomas decisiones basadas en lo que ves alrededor.",
          "examples": [
            {
              "title": "Hacer un batido",
              "description": "Si sigues una receta para un batido (mezclar plátano, leche y azúcar), siempre obtendrás el mismo sabor si usas los mismos ingredientes. Esto es como una función pura en programación funcional: mismo input, mismo output. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            },
            {
              "title": "Organizar una biblioteca",
              "description": "Imagina que ordenas libros en una estantería por género sin cambiar los libros mismos. En programación funcional, los datos (libros) son inmutables, y solo los organizas o procesas sin modificarlos. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            }
          ],
          "image": {
            "url": "paradigma-funcional.jpeg",
            "caption": "Una ilustración que representa el flujo predecible de funciones en el paradigma funcional."
          }
        },
        {
          "title": "Diferencias con otros paradigmas",
          "content": "A diferencia de la programación imperativa, donde das órdenes paso a paso como un chef que improvisa, el paradigma funcional se centra en qué quieres lograr, no en cómo hacerlo. Por ejemplo, en lugar de decir 'toma un número, súmale 2, luego multiplícalo', defines una función que hace todo eso de una vez, como una máquina automática que entrega el resultado final. Para alguien que no sabe nada de tecnología, esto es como aprender a usar un juguete nuevo: al principio parece complicado, pero con ejemplos simples como contar juguetes o agrupar colores, verás cómo se aplica. Recuerda, no necesitas saber de computadoras; solo imagina escenarios cotidianos donde repites acciones o tomas decisiones basadas en lo que ves alrededor.",
          "examples": [
            {
              "title": "Preparar café",
              "description": "En la programación imperativa, indicas cada paso: moler café, hervir agua, mezclar. En programación funcional, defines una 'función café' que toma los granos y entrega la taza lista. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            },
            {
              "title": "Armar un rompecabezas",
              "description": "En otros paradigmas, puedes mover piezas y cambiar el tablero. En el funcional, cada movimiento crea un nuevo tablero sin alterar el original, como tomar una foto del progreso. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            }
          ],
          "image": {
            "url": "paradigma-funcional-2.jpg",
            "caption": "Comparación visual entre paradigmas de programación."
          }
        }
      ]
    }
  },
  {
    "expresiones": {
      "title": "2. Expresiones y valores básicos",
      "description": "En este módulo, aprenderás cómo los lenguajes Racket y OCaml manejan los datos más simples, como números, palabras y valores verdadero/falso, de la misma manera que usas ingredientes básicos en la cocina. Explorarás cómo realizar operaciones como sumar o comparar, que son los bloques de construcción para crear programas más complejos. Imagina que eres alguien que nunca ha usado una computadora para crear instrucciones automáticas, como un niño que juega con bloques de construcción. Aquí, aprenderás paso a paso, usando ejemplos de la vida diaria, como cocinar o organizar tu habitación, para que entiendas cómo estas ideas funcionan sin necesidad de conocimiento técnico previo. Por ejemplo, piensa en cómo sigues una rutina diaria: cada parte es simple, pero juntas forman algo útil. Esto es similar a cómo se construyen los programas en estos lenguajes, asegurando que todo sea confiable y fácil de seguir.",
      "learning_objectives": [
        "Entender los tipos de datos básicos en Racket y OCaml.",
        "Aprender a usar operadores aritméticos y lógicos.",
        "Realizar operaciones simples con números, booleanos y cadenas."
      ],
      "key_concepts": [
        "Tipos de datos",
        "Operadores aritméticos",
        "Operadores lógicos",
        "Expresiones"
      ],
      "subsections": [
        {
          "title": "Tipos de datos básicos",
          "content": "Los tipos de datos son como los ingredientes de una receta: números (como 5 o 3.14), booleanos (verdadero o falso), caracteres (como la letra 'a') y cadenas (como 'hola'). En Racket y OCaml, estos son los elementos básicos con los que construyes programas, y cada uno tiene reglas específicas sobre cómo se usa. Para alguien que no sabe nada de tecnología, esto es como aprender a usar un juguete nuevo: al principio parece complicado, pero con ejemplos simples como contar juguetes o agrupar colores, verás cómo se aplica. Recuerda, no necesitas saber de computadoras; solo imagina escenarios cotidianos donde repites acciones o tomas decisiones basadas en lo que ves alrededor.",
          "examples": [
            {
              "title": "Contar manzanas",
              "description": "Un número como 5 representa cuántas manzanas tienes. Si sumas 3 más, usas un operador aritmético (+), como contar manzanas en una cesta. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            },
            {
              "title": "Decidir si llueve",
              "description": "Un booleano (verdadero/falso) es como decidir si necesitas un paraguas porque está lloviendo (verdadero) o no (falso). Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            }
          ],
          "image": {
            "url": "expresiones.jpg",
            "caption": "Ejemplo de tipos de datos básicos como números y booleanos."
          }
        },
        {
          "title": "Operadores para operaciones básicas",
          "content": "Los operadores son como las acciones que haces con los ingredientes: sumar (+), restar (-), o comparar (¿es 5 mayor que 3?). En Racket y OCaml, usas estos operadores para combinar datos y obtener resultados, como calcular el total de una compra o verificar si tienes suficiente dinero. Para alguien que no sabe nada de tecnología, esto es como aprender a usar un juguete nuevo: al principio parece complicado, pero con ejemplos simples como contar juguetes o agrupar colores, verás cómo se aplica. Recuerda, no necesitas saber de computadoras; solo imagina escenarios cotidianos donde repites acciones o tomas decisiones basadas en lo que ves alrededor.",
          "examples": [
            {
              "title": "Calcular una cuenta",
              "description": "Sumar 10 + 5 es como calcular el total de una compra en una tienda, usando el operador + para combinar números. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            },
            {
              "title": "Comparar pesos",
              "description": "Comparar si 10 kilos de manzanas son más pesados que 8 kilos es como usar un operador lógico (>), que devuelve verdadero. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            }
          ],
          "image": {
            "url": "expresiones-2.jpg",
            "caption": "Ilustración de operadores aplicados a datos básicos."
          }
        }
      ],
      "codigos": {
        "racket": [
          {
            "title": "Contar manzanas",
            "code": "(+ 5 3) ; Resultado: 8 manzanas"
          },
          {
            "title": "Decidir si llueve",
            "code": "(> 10 0) ; Resultado: verdadero (hay lluvia si el valor es positivo)"
          },
          {
            "title": "Calcular una cuenta",
            "code": "(+ 10 5) ; Resultado: 15 dólares"
          },
          {
            "title": "Comparar pesos",
            "code": "(> 10 8) ; Resultado: verdadero (10 es mayor que 8)"
          },
          {
            "title": "Multiplicar números",
            "code": "(* 4 5) ; Resultado: 20"
          },
          {
            "title": "Sumar números",
            "code": "(+ 1 2 3) ; Resultado: 6"
          },
          {
            "title": "Restar números",
            "code": "(- 10 4) ; Resultado: 6"
          },
          {
            "title": "Dividir números",
            "code": "(/ 10 2) ; Resultado: 5"
          },
          {
            "title": "Comparar menor que",
            "code": "(< 3 5) ; Resultado: verdadero (3 es menor que 5)"
          },
          {
            "title": "Comparar menor o igual",
            "code": "(<= 5 5) ; Resultado: verdadero (5 es menor o igual a 5)"
          },
          {
            "title": "Comparar igualdad",
            "code": "(= 7 7) ; Resultado: verdadero (7 es igual a 7)"
          },
          {
            "title": "Comparar mayor que",
            "code": "(> 8 6) ; Resultado: verdadero (8 es mayor que 6)"
          },
          {
            "title": "Comparar mayor o igual",
            "code": "(>= 9 9) ; Resultado: verdadero (9 es mayor o igual a 9)"
          },
          {
            "title": "Calcular valor absoluto",
            "code": "(abs -5) ; Resultado: 5"
          },
          {
            "title": "Calcular arco coseno",
            "code": "(acos 0) ; Resultado: 1.5707963267948966 radianes"
          },
          {
            "title": "Sumar uno",
            "code": "(add1 10) ; Resultado: 11"
          },
          {
            "title": "Calcular ángulo",
            "code": "(angle (make-polar 1 (/ pi 4))) ; Resultado: 45.0 grados (aproximado)"
          },
          {
            "title": "Calcular arco seno",
            "code": "(asin 1) ; Resultado: 1.5707963267948966 radianes"
          },
          {
            "title": "Calcular arco tangente",
            "code": "(atan 1) ; Resultado: 0.7853981633974483 radianes"
          },
          {
            "title": "Redondear hacia arriba",
            "code": "(ceiling 3.2) ; Resultado: 4"
          },
          {
            "title": "Verificar número complejo",
            "code": "(complex? 3+4i) ; Resultado: verdadero (es un número complejo)"
          },
          {
            "title": "Calcular conjugado",
            "code": "(conjugate 3+4i) ; Resultado: 3-4i"
          },
          {
            "title": "Calcular coseno",
            "code": "(cos 0) ; Resultado: 1.0"
          },
          {
            "title": "Calcular coseno hiperbólico",
            "code": "(cosh 0) ; Resultado: 1.0"
          },
          {
            "title": "Obtener segundos actuales",
            "code": "(current-seconds) ; Resultado: segundos actuales"
          },
          {
            "title": "Obtener denominador",
            "code": "(denominator 3/4) ; Resultado: 4"
          },
          {
            "title": "Obtener constante e",
            "code": "e ; Resultado: 2.718281828459045"
          },
          {
            "title": "Verificar número par",
            "code": "(even? 4) ; Resultado: verdadero (4 es par)"
          },
          {
            "title": "Convertir a inexacto",
            "code": "(exact->inexact 3) ; Resultado: 3.0"
          },
          {
            "title": "Verificar exactitud",
            "code": "(exact? 3) ; Resultado: verdadero (3 es exacto)"
          },
          {
            "title": "Calcular exponencial",
            "code": "(exp 1) ; Resultado: 2.718281828459045"
          },
          {
            "title": "Calcular potencia",
            "code": "(expt 2 3) ; Resultado: 8"
          },
          {
            "title": "Redondear hacia abajo",
            "code": "(floor 3.8) ; Resultado: 3"
          },
          {
            "title": "Calcular máximo común divisor",
            "code": "(gcd 12 18) ; Resultado: 6"
          },
          {
            "title": "Obtener parte imaginaria",
            "code": "(imag-part 3+4i) ; Resultado: 4"
          },
          {
            "title": "Convertir a exacto",
            "code": "(inexact->exact 3.0) ; Resultado: 3"
          },
          {
            "title": "Verificar inexactitud",
            "code": "(inexact? 3.0) ; Resultado: verdadero (3.0 es inexacto)"
          },
          {
            "title": "Convertir entero a carácter",
            "code": "(integer->char 65) ; Resultado: #\\A"
          },
          {
            "title": "Calcular raíz cuadrada entera",
            "code": "(integer-sqrt 16) ; Resultado: 4"
          },
          {
            "title": "Verificar entero",
            "code": "(integer? 5) ; Resultado: verdadero (5 es entero)"
          },
          {
            "title": "Calcular mínimo común múltiplo",
            "code": "(lcm 12 18) ; Resultado: 36"
          },
          {
            "title": "Calcular logaritmo",
            "code": "(log 8 2) ; Resultado: 3.0"
          },
          {
            "title": "Calcular magnitud",
            "code": "(magnitude 3+4i) ; Resultado: 5.0"
          },
          {
            "title": "Crear número polar",
            "code": "(make-polar 1 0) ; Resultado: 1+0i"
          },
          {
            "title": "Crear número rectangular",
            "code": "(make-rectangular 3 4) ; Resultado: 3+4i"
          },
          {
            "title": "Obtener máximo",
            "code": "(max 5 3) ; Resultado: 5"
          },
          {
            "title": "Obtener mínimo",
            "code": "(min 5 3) ; Resultado: 3"
          },
          {
            "title": "Calcular módulo",
            "code": "(modulo 10 3) ; Resultado: 1"
          },
          {
            "title": "Verificar número negativo",
            "code": "(negative? -5) ; Resultado: verdadero (-5 es negativo)"
          },
          {
            "title": "Convertir número a cadena",
            "code": "(number->string 42) ; Resultado: \"42\""
          },
          {
            "title": "Verificar número",
            "code": "(number? 5) ; Resultado: verdadero (5 es un número)"
          },
          {
            "title": "Obtener numerador",
            "code": "(numerator 3/4) ; Resultado: 3"
          },
          {
            "title": "Verificar número impar",
            "code": "(odd? 3) ; Resultado: verdadero (3 es impar)"
          },
          {
            "title": "Obtener constante pi",
            "code": "pi ; Resultado: 3.141592653589793"
          },
          {
            "title": "Verificar número positivo",
            "code": "(positive? 5) ; Resultado: verdadero (5 es positivo)"
          },
          {
            "title": "Calcular cociente",
            "code": "(quotient 10 3) ; Resultado: 3"
          },
          {
            "title": "Generar número aleatorio",
            "code": "(random 10) ; Resultado: número entre 0 y 9"
          },
          {
            "title": "Verificar número racional",
            "code": "(rational? 3/4) ; Resultado: verdadero (3/4 es racional)"
          },
          {
            "title": "Obtener parte real",
            "code": "(real-part 3+4i) ; Resultado: 3"
          },
          {
            "title": "Verificar número real",
            "code": "(real? 5.0) ; Resultado: verdadero (5.0 es real)"
          },
          {
            "title": "Calcular resto",
            "code": "(remainder 10 3) ; Resultado: 1"
          },
          {
            "title": "Redondear número",
            "code": "(round 3.6) ; Resultado: 4"
          },
          {
            "title": "Obtener signo",
            "code": "(sgn 5) ; Resultado: 1"
          },
          {
            "title": "Calcular seno",
            "code": "(sin 0) ; Resultado: 0.0"
          },
          {
            "title": "Calcular seno hiperbólico",
            "code": "(sinh 0) ; Resultado: 0.0"
          },
          {
            "title": "Calcular cuadrado",
            "code": "(sqr 4) ; Resultado: 16"
          },
          {
            "title": "Calcular raíz cuadrada",
            "code": "(sqrt 16) ; Resultado: 4.0"
          },
          {
            "title": "Restar uno",
            "code": "(sub1 10) ; Resultado: 9"
          },
          {
            "title": "Calcular tangente",
            "code": "(tan 0) ; Resultado: 0.0"
          },
          {
            "title": "Verificar cero",
            "code": "(zero? 0) ; Resultado: verdadero (0 es cero)"
          }
        ],
        "ocaml": [
          {
            "title": "Contar manzanas",
            "code": "5 + 3 ;; (* Resultado: 8 manzanas *)"
          },
          {
            "title": "Decidir si llueve",
            "code": "10 > 0 ;; (* Resultado: verdadero (hay lluvia si el valor es positivo) *)"
          },
          {
            "title": "Calcular una cuenta",
            "code": "10 + 5 ;; (* Resultado: 15 dólares *)"
          },
          {
            "title": "Comparar pesos",
            "code": "10 > 8 ;; (* Resultado: verdadero (10 es mayor que 8) *)"
          },
          {
            "title": "Multiplicar números",
            "code": "4 * 5 ;; (* Resultado: 20 *)"
          },
          {
            "title": "Sumar números",
            "code": "1 + 2 + 3 ;; (* Resultado: 6 *)"
          },
          {
            "title": "Restar números",
            "code": "10 - 4 ;; (* Resultado: 6 *)"
          },
          {
            "title": "Dividir números",
            "code": "10 / 2 ;; (* Resultado: 5 *)"
          },
          {
            "title": "Comparar menor que",
            "code": "3 < 5 ;; (* Resultado: verdadero (3 es menor que 5) *)"
          },
          {
            "title": "Comparar menor o igual",
            "code": "5 <= 5 ;; (* Resultado: verdadero (5 es menor o igual a 5) *)"
          },
          {
            "title": "Comparar igualdad",
            "code": "7 = 7 ;; (* Resultado: verdadero (7 es igual a 7) *)"
          },
          {
            "title": "Comparar mayor que",
            "code": "8 > 6 ;; (* Resultado: verdadero (8 es mayor que 6) *)"
          },
          {
            "title": "Comparar mayor o igual",
            "code": "9 >= 9 ;; (* Resultado: verdadero (9 es mayor o igual a 9) *)"
          },
          {
            "title": "Calcular valor absoluto",
            "code": "abs (-5) ;; (* Resultado: 5 *)"
          },
          {
            "title": "Calcular arco coseno",
            "code": "acos 0.0 ;; (* Resultado: 1.5707963267948966 radianes *)"
          },
          {
            "title": "Sumar uno",
            "code": "succ 10 ;; (* Resultado: 11 *)"
          },
          {
            "title": "Calcular arco tangente dos",
            "code": "atan2 4.0 3.0 ;; (* Resultado: ángulo en radianes *)"
          },
          {
            "title": "Calcular arco seno",
            "code": "asin 1.0 ;; (* Resultado: 1.5707963267948966 radianes *)"
          },
          {
            "title": "Calcular arco tangente",
            "code": "atan 1.0 ;; (* Resultado: 0.7853981633974483 radianes *)"
          },
          {
            "title": "Redondear hacia arriba",
            "code": "ceil 3.2 ;; (* Resultado: 4.0 *)"
          },
          {
            "title": "Usar número complejo",
            "code": "(* No directo, usa módulos como Complex *)"
          },
          {
            "title": "Calcular conjugado",
            "code": "(* Usa Complex.conj *)"
          },
          {
            "title": "Calcular coseno",
            "code": "cos 0.0 ;; (* Resultado: 1.0 *)"
          },
          {
            "title": "Calcular coseno hiperbólico",
            "code": "cosh 0.0 ;; (* Resultado: 1.0 *)"
          },
          {
            "title": "Obtener segundos actuales",
            "code": "Unix.time () ;; (* Resultado: segundos actuales *)"
          },
          {
            "title": "Obtener denominador",
            "code": "(* No directo para racionales, usa Qml o similares *)"
          },
          {
            "title": "Obtener constante e",
            "code": "exp 1.0 ;; (* Resultado: 2.718281828459045 *)"
          },
          {
            "title": "Verificar número par",
            "code": "4 mod 2 = 0 ;; (* Resultado: verdadero (4 es par) *)"
          },
          {
            "title": "Convertir entero a flotante",
            "code": "float_of_int 3 ;; (* Resultado: 3.0 *)"
          },
          {
            "title": "Verificar entero",
            "code": "(* No directo, usa modf para chequear *)"
          },
          {
            "title": "Calcular exponencial",
            "code": "exp 1.0 ;; (* Resultado: 2.718281828459045 *)"
          },
          {
            "title": "Calcular potencia",
            "code": "2.0 ** 3.0 ;; (* Resultado: 8.0 *)"
          },
          {
            "title": "Redondear hacia abajo",
            "code": "floor 3.8 ;; (* Resultado: 3.0 *)"
          },
          {
            "title": "Calcular máximo común divisor",
            "code": "gcd 12 18 ;; (* Resultado: 6 *)"
          },
          {
            "title": "Obtener parte imaginaria",
            "code": "(* Usa Complex.im *)"
          },
          {
            "title": "Convertir flotante a entero",
            "code": "int_of_float 3.0 ;; (* Resultado: 3 *)"
          },
          {
            "title": "Verificar flotante",
            "code": "(* No directo *)"
          },
          {
            "title": "Convertir entero a carácter",
            "code": "char_of_int 65 ;; (* Resultado: 'A' *)"
          },
          {
            "title": "Calcular raíz cuadrada entera",
            "code": "truncate (sqrt 16.0) ;; (* Resultado: 4 *)"
          },
          {
            "title": "Inferir tipo entero",
            "code": "(* Tipos son inferidos *)"
          },
          {
            "title": "Calcular mínimo común múltiplo",
            "code": "(fun a b -> abs (a * b) / gcd a b) 12 18 ;; (* Resultado: 36 *)"
          },
          {
            "title": "Calcular logaritmo",
            "code": "log 2.71828 ;; (* Resultado: 1.0 aproximadamente *)"
          },
          {
            "title": "Calcular hipotenusa",
            "code": "hypot 3.0 4.0 ;; (* Resultado: 5.0 *)"
          },
          {
            "title": "Crear número polar",
            "code": "(* Usa Complex.polar *)"
          },
          {
            "title": "Crear número rectangular",
            "code": "(* Usa Complex.of_re_im o similar *)"
          },
          {
            "title": "Obtener máximo",
            "code": "max 5 3 ;; (* Resultado: 5 *)"
          },
          {
            "title": "Obtener mínimo",
            "code": "min 5 3 ;; (* Resultado: 3 *)"
          },
          {
            "title": "Calcular módulo",
            "code": "10 mod 3 ;; (* Resultado: 1 *)"
          },
          {
            "title": "Verificar número negativo",
            "code": "5 < 0 ;; (* Resultado: falso (5 no es negativo) *)"
          },
          {
            "title": "Convertir número a cadena",
            "code": "string_of_int 42 ;; (* Resultado: \"42\" *)"
          },
          {
            "title": "Verificar número",
            "code": "(* Tipos inferidos *)"
          },
          {
            "title": "Obtener numerador",
            "code": "(* No directo *)"
          },
          {
            "title": "Verificar número impar",
            "code": "3 mod 2 <> 0 ;; (* Resultado: verdadero (3 es impar) *)"
          },
          {
            "title": "Obtener constante pi",
            "code": "Float.pi ;; (* Resultado: 3.141592653589793 *)"
          },
          {
            "title": "Verificar número positivo",
            "code": "5 > 0 ;; (* Resultado: verdadero (5 es positivo) *)"
          },
          {
            "title": "Calcular cociente",
            "code": "10 / 3 ;; (* Resultado: 3 *)"
          },
          {
            "title": "Generar número aleatorio",
            "code": "Random.int 10 ;; (* Resultado: número entre 0 y 9 *)"
          },
          {
            "title": "Verificar número racional",
            "code": "(* No directo *)"
          },
          {
            "title": "Obtener parte real",
            "code": "(* Usa Complex.re *)"
          },
          {
            "title": "Verificar flotante",
            "code": "(* Tipos inferidos *)"
          },
          {
            "title": "Calcular módulo nuevamente",
            "code": "10 mod 3 ;; (* Resultado: 1 *)"
          },
          {
            "title": "Redondear número",
            "code": "round 3.6 ;; (* Resultado: 4.0 *)"
          },
          {
            "title": "Obtener signo",
            "code": "compare 5 0 ;; (* Resultado: 1 *)"
          },
          {
            "title": "Calcular seno",
            "code": "sin 0.0 ;; (* Resultado: 0.0 *)"
          },
          {
            "title": "Calcular seno hiperbólico",
            "code": "sinh 0.0 ;; (* Resultado: 0.0 *)"
          },
          {
            "title": "Calcular cuadrado",
            "code": "4 * 4 ;; (* Resultado: 16 *)"
          },
          {
            "title": "Calcular raíz cuadrada",
            "code": "sqrt 16.0 ;; (* Resultado: 4.0 *)"
          },
          {
            "title": "Restar uno",
            "code": "pred 10 ;; (* Resultado: 9 *)"
          },
          {
            "title": "Calcular tangente",
            "code": "tan 0.0 ;; (* Resultado: 0.0 *)"
          },
          {
            "title": "Verificar cero",
            "code": "0 = 0 ;; (* Resultado: verdadero (0 es cero) *)"
          }
        ]
      }
    }
  },
  {
    "funciones": {
      "title": "3. Definición y uso de funciones",
      "description": "Las funciones son como recetas que puedes usar una y otra vez: defines los pasos una vez y luego los aplicas con diferentes ingredientes. Este módulo te enseña cómo crear y usar funciones en Racket y OCaml, especificando qué datos reciben y qué producen, como una máquina que siempre da el mismo resultado con los mismos insumos. Imagina que eres alguien que nunca ha usado una computadora para crear instrucciones automáticas, como un niño que juega con bloques de construcción. Aquí, aprenderás paso a paso, usando ejemplos de la vida diaria, como cocinar o organizar tu habitación, para que entiendas cómo estas ideas funcionan sin necesidad de conocimiento técnico previo. Por ejemplo, piensa en cómo sigues una rutina diaria: cada parte es simple, pero juntas forman algo útil. Esto es similar a cómo se construyen los programas en estos lenguajes, asegurando que todo sea confiable y fácil de seguir.",
      "learning_objectives": [
        "Aprender a definir funciones en Racket y OCaml.",
        "Entender cómo pasar parámetros a una función.",
        "Comprender cómo las funciones devuelven valores."
      ],
      "key_concepts": ["Funciones", "Parámetros", "Valores de retorno"],
      "subsections": [
        {
          "title": "Crear una función",
          "content": "Definir una función es como escribir una receta: especificas los ingredientes (parámetros) y los pasos para obtener un plato (resultado). En Racket y OCaml, las funciones se escriben con una sintaxis clara, indicando qué datos necesitan y qué devuelven. Para alguien que no sabe nada de tecnología, esto es como aprender a usar un juguete nuevo: al principio parece complicado, pero con ejemplos simples como contar juguetes o agrupar colores, verás cómo se aplica. Recuerda, no necesitas saber de computadoras; solo imagina escenarios cotidianos donde repites acciones o tomas decisiones basadas en lo que ves alrededor.",
          "examples": [
            {
              "title": "Receta de limonada",
              "description": "Una función que calcula cuánta limonada puedes hacer con 3 limones es como una receta que siempre da el mismo resultado con la misma cantidad de limones. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            },
            {
              "title": "Calcular el área",
              "description": "Una función que calcula el área de un rectángulo (largo × ancho) es como una calculadora que toma medidas y te da el tamaño del espacio. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            }
          ],
          "image": {
            "url": "funciones.jpg",
            "caption": "Representación de una función como una receta."
          }
        },
        {
          "title": "Usar funciones",
          "content": "Usar una función es como seguir una receta ya escrita: das los ingredientes (parámetros) y obtienes el plato (resultado). En Racket y OCaml, llamas a la función con datos específicos para obtener un valor calculado. Para alguien que no sabe nada de tecnología, esto es como aprender a usar un juguete nuevo: al principio parece complicado, pero con ejemplos simples como contar juguetes o agrupar colores, verás cómo se aplica. Recuerda, no necesitas saber de computadoras; solo imagina escenarios cotidianos donde repites acciones o tomas decisiones basadas en lo que ves alrededor.",
          "examples": [
            {
              "title": "Hacer un pastel",
              "description": "Si tienes una receta (función) para un pastel, la usas dando los ingredientes (parámetros como harina y azúcar) para obtener el pastel listo. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            },
            {
              "title": "Planificar un viaje",
              "description": "Una función que calcula el tiempo de viaje según la distancia y la velocidad es como usar un GPS que te dice cuánto tardarás. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            }
          ],
          "image": {
            "url": "funciones-2.jpg",
            "caption": "Ejemplo de cómo usar una función con parámetros."
          }
        }
      ],
      "codigos": {
        "racket": [
          {
            "title": "Definir una funci\u00f3n simple",
            "code": "(define (saludo) \"Hola\") ; Resultado: una funci\u00f3n que retorna \"Hola\""
          },
          {
            "title": "Definir funci\u00f3n con par\u00e1metro",
            "code": "(define (sumar uno) (+ uno 1)) ; Resultado: una funci\u00f3n que suma 1 a un n\u00famero"
          },
          {
            "title": "Llamar a una funci\u00f3n",
            "code": "(sumar 5) ; Resultado: 6 (asumiendo la funci\u00f3n definida)"
          },
          {
            "title": "Funci\u00f3n lambda simple",
            "code": " (lambda (x) (* x 2)) ; Resultado: una funci\u00f3n an\u00f3nima que duplica un n\u00famero"
          },
          {
            "title": "Aplicar lambda",
            "code": "((lambda (x) (* x 2)) 3) ; Resultado: 6"
          }
        ],
        "ocaml": [
          {
            "title": "Definir una funci\u00f3n simple",
            "code": "let saludo () = \"Hola\" ;; ; Resultado: una funci\u00f3n que retorna \"Hola\""
          },
          {
            "title": "Definir funci\u00f3n con par\u00e1metro",
            "code": "let sumar uno = uno + 1 ;; ; Resultado: una funci\u00f3n que suma 1 a un n\u00famero"
          },
          {
            "title": "Llamar a una funci\u00f3n",
            "code": "sumar 5 ;; ; Resultado: 6 (asumiendo la funci\u00f3n definida)"
          },
          {
            "title": "Funci\u00f3n lambda simple",
            "code": "fun x -> x * 2 ;; ; Resultado: una funci\u00f3n an\u00f3nima que duplica un n\u00famero"
          },
          {
            "title": "Aplicar lambda",
            "code": "(fun x -> x * 2) 3 ;; ; Resultado: 6"
          }
        ]
      }
    }
  },
  {
    "funciones-multiples": {
      "title": "4. Funciones con múltiples parámetros",
      "description": "A veces, una receta necesita más de un ingrediente, como azúcar y limones para una limonada. En este módulo, aprenderás a crear funciones en Racket y OCaml que manejan varios datos a la vez, permitiéndote resolver problemas más complejos, como calcular el costo total de una compra con descuentos. Imagina que eres alguien que nunca ha usado una computadora para crear instrucciones automáticas, como un niño que juega con bloques de construcción. Aquí, aprenderás paso a paso, usando ejemplos de la vida diaria, como cocinar o organizar tu habitación, para que entiendas cómo estas ideas funcionan sin necesidad de conocimiento técnico previo. Por ejemplo, piensa en cómo sigues una rutina diaria: cada parte es simple, pero juntas forman algo útil. Esto es similar a cómo se construyen los programas en estos lenguajes, asegurando que todo sea confiable y fácil de seguir.",
      "learning_objectives": [
        "Definir funciones con múltiples parámetros.",
        "Aplicar funciones con varios datos de entrada.",
        "Resolver problemas prácticos usando múltiples parámetros."
      ],
      "key_concepts": ["Parámetros múltiples", "Funciones complejas"],
      "subsections": [
        {
          "title": "Definir funciones con varios parámetros",
          "content": "Una función con múltiples parámetros es como una receta que necesita varios ingredientes para funcionar. En Racket y OCaml, especificas cada parámetro claramente, y la función los combina para dar un resultado útil. Para alguien que no sabe nada de tecnología, esto es como aprender a usar un juguete nuevo: al principio parece complicado, pero con ejemplos simples como contar juguetes o agrupar colores, verás cómo se aplica. Recuerda, no necesitas saber de computadoras; solo imagina escenarios cotidianos donde repites acciones o tomas decisiones basadas en lo que ves alrededor.",
          "examples": [
            {
              "title": "Preparar un sándwich",
              "description": "Una función que hace un sándwich necesita pan, jamón y queso como parámetros, combinándolos para crear el sándwich final. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            },
            {
              "title": "Calcular el costo de una compra",
              "description": "Una función que calcula el costo total toma el precio por unidad y la cantidad como parámetros, como sumar el costo de 5 manzanas a $2 cada una. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            }
          ],
          "image": {
            "url": "funciones-multiples.jpg",
            "caption": "Ilustración de una función que combina múltiples parámetros."
          }
        },
        {
          "title": "Aplicaciones prácticas",
          "content": "Con múltiples parámetros, las funciones pueden resolver problemas más interesantes, como calcular el tiempo de un viaje considerando distancia, velocidad y paradas. Esto hace que las funciones sean más flexibles y útiles. Para alguien que no sabe nada de tecnología, esto es como aprender a usar un juguete nuevo: al principio parece complicado, pero con ejemplos simples como contar juguetes o agrupar colores, verás cómo se aplica. Recuerda, no necesitas saber de computadoras; solo imagina escenarios cotidianos donde repites acciones o tomas decisiones basadas en lo que ves alrededor.",
          "examples": [
            {
              "title": "Planificar una cena",
              "description": "Una función que calcula cuánta comida necesitas toma el número de invitados y el tipo de plato como parámetros, como planificar una barbacoa. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            },
            {
              "title": "Diseñar una habitación",
              "description": "Una función que calcula cuánta pintura necesitas usa el largo, ancho y alto de la habitación como parámetros, como medir para decorar. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            }
          ],
          "image": {
            "url": "funciones-multiples-2.jpg",
            "caption": "Ejemplo de funciones con múltiples parámetros en acción."
          }
        }
      ],
      "codigos": {
        "racket": [
          {
            "title": "Definir funci\u00f3n con dos par\u00e1metros",
            "code": "(define (sumar-dos a b) (+ a b)) ; Resultado: una funci\u00f3n que suma dos n\u00fameros"
          },
          {
            "title": "Definir funci\u00f3n con tres par\u00e1metros",
            "code": "(define (multiplicar-tres x y z) (* x y z)) ; Resultado: una funci\u00f3n que multiplica tres n\u00fameros"
          },
          {
            "title": "Llamar funci\u00f3n con m\u00faltiples par\u00e1metros",
            "code": "(sumar-dos 4 6) ; Resultado: 10 (asumiendo la funci\u00f3n definida)"
          },
          {
            "title": "Lambda con m\u00faltiples par\u00e1metros",
            "code": "(lambda (a b) (- a b)) ; Resultado: funci\u00f3n an\u00f3nima que resta dos n\u00fameros"
          },
          {
            "title": "Aplicar lambda con m\u00faltiples par\u00e1metros",
            "code": "((lambda (a b c) (+ a b c)) 1 2 3) ; Resultado: 6"
          }
        ],
        "ocaml": [
          {
            "title": "Definir funci\u00f3n con dos par\u00e1metros",
            "code": "let sumar_dos a b = a + b ;; ; Resultado: una funci\u00f3n que suma dos n\u00fameros"
          },
          {
            "title": "Definir funci\u00f3n con tres par\u00e1metros",
            "code": "let multiplicar_tres x y z = x * y * z ;; ; Resultado: una funci\u00f3n que multiplica tres n\u00fameros"
          },
          {
            "title": "Llamar funci\u00f3n con m\u00faltiples par\u00e1metros",
            "code": "sumar_dos 4 6 ;; ; Resultado: 10 (asumiendo la funci\u00f3n definida)"
          },
          {
            "title": "Lambda con m\u00faltiples par\u00e1metros",
            "code": "fun a b -> a - b ;; ; Resultado: funci\u00f3n an\u00f3nima que resta dos n\u00fameros"
          },
          {
            "title": "Aplicar lambda con m\u00faltiples par\u00e1metros",
            "code": "(fun a b c -> a + b + c) 1 2 3 ;; ; Resultado: 6"
          }
        ]
      }
    }
  },
  {
    "condicionales": {
      "title": "5. Condicionales en programación funcional",
      "description": "Las condicionales son como tomar decisiones en la vida diaria: si llueve, llevas un paraguas; si no, no lo haces. En este módulo, aprenderás a usar estructuras como `if` y `cond` en Racket y OCaml para que tus programas tomen decisiones de manera funcional, sin cambiar datos existentes. Imagina que eres alguien que nunca ha usado una computadora para crear instrucciones automáticas, como un niño que juega con bloques de construcción. Aquí, aprenderás paso a paso, usando ejemplos de la vida diaria, como cocinar o organizar tu habitación, para que entiendas cómo estas ideas funcionan sin necesidad de conocimiento técnico previo. Por ejemplo, piensa en cómo sigues una rutina diaria: cada parte es simple, pero juntas forman algo útil. Esto es similar a cómo se construyen los programas en estos lenguajes, asegurando que todo sea confiable y fácil de seguir.",
      "learning_objectives": [
        "Entender cómo funcionan las condicionales en Racket y OCaml.",
        "Aplicar `if` y `cond` para tomar decisiones.",
        "Mantener un enfoque funcional puro en las decisiones."
      ],
      "key_concepts": [
        "Condicionales",
        "`if`",
        "`cond`",
        "Programación funcional"
      ],
      "subsections": [
        {
          "title": "Estructuras condicionales",
          "content": "Las condicionales permiten que un programa elija entre diferentes caminos según una condición, como decidir qué ropa ponerte según el clima. En Racket y OCaml, usas `if` para decisiones simples y `cond` para casos más complejos, siempre devolviendo un valor sin alterar el entorno. Para alguien que no sabe nada de tecnología, esto es como aprender a usar un juguete nuevo: al principio parece complicado, pero con ejemplos simples como contar juguetes o agrupar colores, verás cómo se aplica. Recuerda, no necesitas saber de computadoras; solo imagina escenarios cotidianos donde repites acciones o tomas decisiones basadas en lo que ves alrededor.",
          "examples": [
            {
              "title": "Elegir un paraguas",
              "description": "Si está lloviendo (condición verdadera), tomas un paraguas; si no, no lo haces. Esto es como una instrucción `if` en programación funcional. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            },
            {
              "title": "Escoger un menú",
              "description": "Si es lunes, comes sopa; si es martes, pizza; si no, ensalada. Esto es como usar `cond` para elegir entre varias opciones. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            }
          ],
          "image": {
            "url": "condicionales.jpg",
            "caption": "Diagrama de una decisión condicional en programación funcional."
          }
        },
        {
          "title": "Condicionales en enfoque funcional",
          "content": "En programación funcional, las condicionales no cambian datos, solo eligen un valor. Es como decidir qué camino tomar en un mapa sin modificar el mapa mismo. Esto asegura que los programas sean predecibles y fáciles de entender. Para alguien que no sabe nada de tecnología, esto es como aprender a usar un juguete nuevo: al principio parece complicado, pero con ejemplos simples como contar juguetes o agrupar colores, verás cómo se aplica. Recuerda, no necesitas saber de computadoras; solo imagina escenarios cotidianos donde repites acciones o tomas decisiones basadas en lo que ves alrededor.",
          "examples": [
            {
              "title": "Seleccionar un regalo",
              "description": "Si es un cumpleaños, eliges un pastel; si es Navidad, un juguete. La decisión no cambia la lista de regalos, solo selecciona uno. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            },
            {
              "title": "Clasificar frutas",
              "description": "Si una fruta es roja, la pones en una cesta; si es verde, en otra. Esto es como usar condicionales para clasificar sin alterar las frutas. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            }
          ],
          "image": {
            "url": "condicionales-2.jpg",
            "caption": "Ejemplo de condicionales aplicadas a decisiones simples."
          }
        }
      ],
      "codigos": {
        "racket": [
          {
            "title": "Usar if simple",
            "code": "(if (> 5 3) \"Mayor\" \"Menor\") ; Resultado: \"Mayor\""
          },
          {
            "title": "Usar cond con m\u00faltiples casos",
            "code": "(cond [(= 1 1) \"Uno\"]\n      [(= 2 2) \"Dos\"]\n      [else \"Otro\"]) ; Resultado: \"Uno\""
          },
          {
            "title": "If con expresi\u00f3n booleana",
            "code": "(if #t \"Verdadero\" \"Falso\") ; Resultado: \"Verdadero\""
          },
          {
            "title": "Cond con else",
            "code": "(cond [#f \"Falso\"]\n      [else \"Else\"]) ; Resultado: \"Else\""
          },
          {
            "title": "If anidado",
            "code": "(if (> 10 5) (if (< 3 4) \"Anidado\" \"No\") \"No\") ; Resultado: \"Anidado\""
          }
        ],
        "ocaml": [
          {
            "title": "Usar if simple",
            "code": "if 5 > 3 then \"Mayor\" else \"Menor\" ;; ; Resultado: \"Mayor\""
          },
          {
            "title": "Usar match con m\u00faltiples casos",
            "code": "match 1 with\n| 1 -> \"Uno\"\n| 2 -> \"Dos\"\n| _ -> \"Otro\" ;; ; Resultado: \"Uno\""
          },
          {
            "title": "If con expresi\u00f3n booleana",
            "code": "if true then \"Verdadero\" else \"Falso\" ;; ; Resultado: \"Verdadero\""
          },
          {
            "title": "Match con wildcard",
            "code": "match false with\n| true -> \"Verdadero\"\n| _ -> \"Falso\" ;; ; Resultado: \"Falso\""
          },
          {
            "title": "If anidado",
            "code": "if 10 > 5 then if 3 < 4 then \"Anidado\" else \"No\" else \"No\" ;; ; Resultado: \"Anidado\""
          }
        ]
      }
    }
  },
  {
    "recursion": {
      "title": "6. Introducción a la recursión",
      "description": "La recursión es como seguir una receta que incluye llamarse a sí misma, como cortar una cebolla en trozos más pequeños hasta que estén listos. En este módulo, aprenderás a diseñar funciones recursivas en Racket y OCaml que resuelven problemas repitiendo pasos sin usar bucles tradicionales. Imagina que eres alguien que nunca ha usado una computadora para crear instrucciones automáticas, como un niño que juega con bloques de construcción. Aquí, aprenderás paso a paso, usando ejemplos de la vida diaria, como cocinar o organizar tu habitación, para que entiendas cómo estas ideas funcionan sin necesidad de conocimiento técnico previo. Por ejemplo, piensa en cómo sigues una rutina diaria: cada parte es simple, pero juntas forman algo útil. Esto es similar a cómo se construyen los programas en estos lenguajes, asegurando que todo sea confiable y fácil de seguir.",
      "learning_objectives": [
        "Comprender el concepto de recursión.",
        "Diseñar funciones con casos base y recursivos.",
        "Resolver problemas usando recursión en lugar de bucles."
      ],
      "key_concepts": ["Recursión", "Caso base", "Caso recursivo"],
      "subsections": [
        {
          "title": "Qué es la recursión",
          "content": "La recursión es cuando una función se llama a sí misma para resolver un problema dividiéndolo en partes más pequeñas. Es como abrir una caja que contiene otra caja más pequeña, hasta llegar a la última. En Racket y OCaml, defines un caso base (cuándo parar) y un caso recursivo (cómo continuar). Para alguien que no sabe nada de tecnología, esto es como aprender a usar un juguete nuevo: al principio parece complicado, pero con ejemplos simples como contar juguetes o agrupar colores, verás cómo se aplica. Recuerda, no necesitas saber de computadoras; solo imagina escenarios cotidianos donde repites acciones o tomas decisiones basadas en lo que ves alrededor.",
          "examples": [
            {
              "title": "Cortar una cuerda",
              "description": "Para cortar una cuerda en trozos iguales, cortas un pedazo y repites con lo que queda hasta que no hay más cuerda. Esto es como una función recursiva. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            },
            {
              "title": "Contar monedas",
              "description": "Para contar monedas en una pila, tomas una, cuentas las demás, y sumas. La recursión hace esto hasta que no quedan monedas. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            }
          ],
          "image": {
            "url": "recursion.jpg",
            "caption": "Ilustración de cómo la recursión divide un problema en partes."
          }
        },
        {
          "title": "Casos base y recursivos",
          "content": "Toda función recursiva necesita un caso base para saber cuándo detenerse y un caso recursivo para seguir avanzando. Es como decidir si sigues cortando una fruta o paras cuando ya está en trozos pequeños. En Racket y OCaml, defines estas partes claramente para evitar errores. Para alguien que no sabe nada de tecnología, esto es como aprender a usar un juguete nuevo: al principio parece complicado, pero con ejemplos simples como contar juguetes o agrupar colores, verás cómo se aplica. Recuerda, no necesitas saber de computadoras; solo imagina escenarios cotidianos donde repites acciones o tomas decisiones basadas en lo que ves alrededor.",
          "examples": [
            {
              "title": "Armar una torre",
              "description": "Si construyes una torre de bloques, el caso base es cuando no hay más bloques. El caso recursivo es poner un bloque y repetir. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            },
            {
              "title": "Leer un libro",
              "description": "Leer un libro página por página es recursivo: el caso base es la última página, y el caso recursivo es leer una página y pasar a la siguiente. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            }
          ],
          "image": {
            "url": "recursion-2.jpg",
            "caption": "Ejemplo de casos base y recursivos en una función."
          }
        }
      ]
    }
  },
  {
    "listas": {
      "title": "7. Listas y operaciones básicas",
      "description": "Las listas son como carritos de compras: colecciones de elementos que puedes organizar y manipular. En este módulo, aprenderás a crear y trabajar con listas en Racket y OCaml, usando funciones para agregar, quitar o consultar elementos de manera efectiva. Imagina que eres alguien que nunca ha usado una computadora para crear instrucciones automáticas, como un niño que juega con bloques de construcción. Aquí, aprenderás paso a paso, usando ejemplos de la vida diaria, como cocinar o organizar tu habitación, para que entiendas cómo estas ideas funcionan sin necesidad de conocimiento técnico previo. Por ejemplo, piensa en cómo sigues una rutina diaria: cada parte es simple, pero juntas forman algo útil. Esto es similar a cómo se construyen los programas en estos lenguajes, asegurando que todo sea confiable y fácil de seguir.",
      "learning_objectives": [
        "Entender cómo se crean y estructuran listas.",
        "Aplicar funciones básicas para manipular listas.",
        "Resolver problemas simples con listas."
      ],
      "key_concepts": [
        "Listas",
        "Operaciones de listas",
        "Estructuras de datos"
      ],
      "subsections": [
        {
          "title": "Crear y estructurar listas",
          "content": "Una lista es una colección ordenada de elementos, como una lista de compras con leche, pan y huevos. En Racket y OCaml, las listas se construyen uniendo elementos, y puedes acceder a ellos o modificar la lista sin cambiar los datos originales. Para alguien que no sabe nada de tecnología, esto es como aprender a usar un juguete nuevo: al principio parece complicado, pero con ejemplos simples como contar juguetes o agrupar colores, verás cómo se aplica. Recuerda, no necesitas saber de computadoras; solo imagina escenarios cotidianos donde repites acciones o tomas decisiones basadas en lo que ves alrededor.",
          "examples": [
            {
              "title": "Lista de compras",
              "description": "Crear una lista con 'manzanas, plátanos, naranjas' es como escribir una lista de compras. Puedes agregar o quitar ítems sin cambiar los productos. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            },
            {
              "title": "Fila de personas",
              "description": "Una lista de nombres en una fila es como una lista en programación: puedes añadir a alguien al final o ver quién está primero. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            }
          ],
          "image": {
            "url": "listas.jpg",
            "caption": "Representación de una lista como una colección ordenada."
          }
        },
        {
          "title": "Operaciones con listas",
          "content": "Puedes realizar operaciones como agregar un elemento, quitar uno o consultar el primero. Es como administrar una lista de tareas: añades una nueva, completas una, o verificas cuál es la próxima. Racket y OCaml ofrecen funciones específicas para estas tareas. Para alguien que no sabe nada de tecnología, esto es como aprender a usar un juguete nuevo: al principio parece complicado, pero con ejemplos simples como contar juguetes o agrupar colores, verás cómo se aplica. Recuerda, no necesitas saber de computadoras; solo imagina escenarios cotidianos donde repites acciones o tomas decisiones basadas en lo que ves alrededor.",
          "examples": [
            {
              "title": "Organizar tareas",
              "description": "Añadir 'lavar platos' a una lista de tareas es como usar una función para agregar un elemento al final de una lista. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            },
            {
              "title": "Revisar un pedido",
              "description": "Ver el primer artículo de una lista de compras es como usar una función para consultar el primer elemento de una lista. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            }
          ],
          "image": {
            "url": "listas-2.jpg",
            "caption": "Ejemplo de operaciones básicas con listas."
          }
        }
      ],
      "codigos": {
        "racket": [
          {
            "title": "Crear una lista",
            "code": "(list 1 2 3) ; Resultado: '(1 2 3)"
          },
          {
            "title": "A\u00f1adir elemento al frente",
            "code": "(cons 0 '(1 2 3)) ; Resultado: '(0 1 2 3)"
          },
          {
            "title": "Obtener primer elemento",
            "code": "(car '(1 2 3)) ; Resultado: 1"
          },
          {
            "title": "Obtener resto de la lista",
            "code": "(cdr '(1 2 3)) ; Resultado: '(2 3)"
          },
          {
            "title": "Verificar lista vac\u00eda",
            "code": "(null? '()) ; Resultado: verdadero (#t)"
          },
          {
            "title": "Verificar si es lista",
            "code": "(list? '(1 2 3)) ; Resultado: verdadero (#t)"
          },
          {
            "title": "Obtener longitud de lista",
            "code": "(length '(1 2 3)) ; Resultado: 3"
          },
          {
            "title": "A\u00f1adir listas",
            "code": "(append '(1 2) '(3 4)) ; Resultado: '(1 2 3 4)"
          },
          {
            "title": "Reversar lista",
            "code": "(reverse '(1 2 3)) ; Resultado: '(3 2 1)"
          },
          {
            "title": "Verificar miembro en lista",
            "code": "(member 2 '(1 2 3)) ; Resultado: '(2 3)"
          },
          {
            "title": "Remover elemento de lista",
            "code": "(remove 2 '(1 2 3)) ; Resultado: '(1 3)"
          },
          {
            "title": "Aplicar map a lista",
            "code": "(map add1 '(1 2 3)) ; Resultado: '(2 3 4)"
          },
          {
            "title": "Filtrar lista",
            "code": "(filter even? '(1 2 3 4)) ; Resultado: '(2 4)"
          },
          {
            "title": "Fold izquierdo",
            "code": "(foldl + 0 '(1 2 3)) ; Resultado: 6"
          },
          {
            "title": "Fold derecho",
            "code": "(foldr cons '() '(1 2 3)) ; Resultado: '(1 2 3)"
          },
          {
            "title": "Obtener primer elemento (first)",
            "code": "(first '(1 2 3)) ; Resultado: 1"
          },
          {
            "title": "Obtener resto (rest)",
            "code": "(rest '(1 2 3)) ; Resultado: '(2 3)"
          },
          {
            "title": "Obtener segundo elemento",
            "code": "(second '(1 2 3)) ; Resultado: 2"
          },
          {
            "title": "Obtener tercero",
            "code": "(third '(1 2 3)) ; Resultado: 3"
          },
          {
            "title": "Verificar lista vac\u00eda (empty?)",
            "code": "(empty? '()) ; Resultado: verdadero (#t)"
          },
          {
            "title": "Crear lista repetida",
            "code": "(make-list 3 0) ; Resultado: '(0 0 0)"
          }
        ],
        "ocaml": [
          {
            "title": "Crear una lista",
            "code": "[1; 2; 3] ;; ; Resultado: [1; 2; 3]"
          },
          {
            "title": "A\u00f1adir elemento al frente",
            "code": "0 :: [1; 2; 3] ;; ; Resultado: [0; 1; 2; 3]"
          },
          {
            "title": "Obtener primer elemento",
            "code": "List.hd [1; 2; 3] ;; ; Resultado: 1"
          },
          {
            "title": "Obtener resto de la lista",
            "code": "List.tl [1; 2; 3] ;; ; Resultado: [2; 3]"
          },
          {
            "title": "Verificar lista vac\u00eda",
            "code": "[] = [] ;; ; Resultado: true"
          },
          {
            "title": "Verificar si es lista",
            "code": "(* No directo, listas son tipos inferidos *)"
          },
          {
            "title": "Obtener longitud de lista",
            "code": "List.length [1; 2; 3] ;; ; Resultado: 3"
          },
          {
            "title": "A\u00f1adir listas",
            "code": "[1; 2] @ [3; 4] ;; ; Resultado: [1; 2; 3; 4]"
          },
          {
            "title": "Reversar lista",
            "code": "List.rev [1; 2; 3] ;; ; Resultado: [3; 2; 1]"
          },
          {
            "title": "Verificar miembro en lista",
            "code": "List.mem 2 [1; 2; 3] ;; ; Resultado: true"
          },
          {
            "title": "Remover elemento de lista",
            "code": "List.filter (fun x -> x <> 2) [1; 2; 3] ;; ; Resultado: [1; 3]"
          },
          {
            "title": "Aplicar map a lista",
            "code": "List.map (fun x -> x + 1) [1; 2; 3] ;; ; Resultado: [2; 3; 4]"
          },
          {
            "title": "Filtrar lista",
            "code": "List.filter (fun x -> x mod 2 = 0) [1; 2; 3; 4] ;; ; Resultado: [2; 4]"
          },
          {
            "title": "Fold izquierdo",
            "code": "List.fold_left (+) 0 [1; 2; 3] ;; ; Resultado: 6"
          },
          {
            "title": "Fold derecho",
            "code": "List.fold_right (fun x acc -> x :: acc) [1; 2; 3] [] ;; ; Resultado: [1; 2; 3]"
          },
          {
            "title": "Obtener primer elemento (hd)",
            "code": "List.hd [1; 2; 3] ;; ; Resultado: 1"
          },
          {
            "title": "Obtener resto (tl)",
            "code": "List.tl [1; 2; 3] ;; ; Resultado: [2; 3]"
          },
          {
            "title": "Obtener segundo elemento",
            "code": "List.nth [1; 2; 3] 1 ;; ; Resultado: 2 (0-indexed)"
          },
          {
            "title": "Obtener tercero",
            "code": "List.nth [1; 2; 3] 2 ;; ; Resultado: 3"
          },
          {
            "title": "Verificar lista vac\u00eda",
            "code": "List.is_empty [] ;; ; Resultado: true"
          },
          {
            "title": "Crear lista repetida",
            "code": "List.init 3 (fun _ -> 0) ;; ; Resultado: [0; 0; 0]"
          }
        ]
      }
    }
  },
  {
    "funciones-orden-superior": {
      "title": "8. Funciones de orden superior básicas",
      "description": "Las funciones de orden superior son como herramientas que usan otras herramientas para trabajar. En este módulo, aprenderás a usar funciones como `map` y `filter` en Racket y OCaml para transformar o seleccionar elementos de listas, como clasificar frutas o duplicar cantidades en una receta. Imagina que eres alguien que nunca ha usado una computadora para crear instrucciones automáticas, como un niño que juega con bloques de construcción. Aquí, aprenderás paso a paso, usando ejemplos de la vida diaria, como cocinar o organizar tu habitación, para que entiendas cómo estas ideas funcionan sin necesidad de conocimiento técnico previo. Por ejemplo, piensa en cómo sigues una rutina diaria: cada parte es simple, pero juntas forman algo útil. Esto es similar a cómo se construyen los programas en estos lenguajes, asegurando que todo sea confiable y fácil de seguir.",
      "learning_objectives": [
        "Comprender qué son las funciones de orden superior.",
        "Aplicar `map` y `filter` para procesar listas.",
        "Resolver problemas usando funciones que operan sobre otras funciones."
      ],
      "key_concepts": ["Funciones de orden superior", "`map`", "`filter`"],
      "subsections": [
        {
          "title": "Qué son las funciones de orden superior",
          "content": "Una función de orden superior toma otra función como ingrediente, como un chef que usa una receta dentro de otra receta. En Racket y OCaml, `map` y `filter` son ejemplos: `map` aplica una función a cada elemento de una lista, y `filter` selecciona elementos según una condición. Para alguien que no sabe nada de tecnología, esto es como aprender a usar un juguete nuevo: al principio parece complicado, pero con ejemplos simples como contar juguetes o agrupar colores, verás cómo se aplica. Recuerda, no necesitas saber de computadoras; solo imagina escenarios cotidianos donde repites acciones o tomas decisiones basadas en lo que ves alrededor.",
          "examples": [
            {
              "title": "Duplicar ingredientes",
              "description": "Si tienes una lista de cantidades para una receta (1, 2, 3 cucharadas) y usas `map` para duplicarlas, obtienes (2, 4, 6), como ajustar una receta para más personas. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            },
            {
              "title": "Seleccionar frutas maduras",
              "description": "Usar `filter` para elegir solo las frutas maduras de una canasta es como filtrar una lista para quedarte solo con ciertos elementos. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            }
          ],
          "image": {
            "url": "funciones-orden-superior.jpg",
            "caption": "Ilustración de funciones de orden superior aplicadas a listas."
          }
        },
        {
          "title": "Usos prácticos de `map` y `filter`",
          "content": "Estas funciones simplifican el trabajo con listas, permitiéndote transformar o seleccionar datos sin escribir pasos repetitivos. Es como usar una máquina que automáticamente dobla la ropa o selecciona solo las camisas limpias. Para alguien que no sabe nada de tecnología, esto es como aprender a usar un juguete nuevo: al principio parece complicado, pero con ejemplos simples como contar juguetes o agrupar colores, verás cómo se aplica. Recuerda, no necesitas saber de computadoras; solo imagina escenarios cotidianos donde repites acciones o tomas decisiones basadas en lo que ves alrededor.",
          "examples": [
            {
              "title": "Ajustar precios",
              "description": "Usar `map` para aumentar un 10% los precios de una lista de productos es como ajustar un presupuesto automáticamente. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            },
            {
              "title": "Filtrar tareas completadas",
              "description": "Usar `filter` para mostrar solo las tareas terminadas de una lista es como revisar qué pendientes ya hiciste. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            }
          ],
          "image": {
            "url": "funciones-orden-superior-2.jpg",
            "caption": "Ejemplo de `map` y `filter` en acción."
          }
        }
      ],
      "codigos": {
        "racket": [
          {
            "title": "Aplicar map para duplicar",
            "code": "(map (lambda (x) (* x 2)) '(1 2 3)) ; Resultado: '(2 4 6)"
          },
          {
            "title": "Filtrar n\u00fameros pares",
            "code": "(filter even? '(1 2 3 4)) ; Resultado: '(2 4)"
          },
          {
            "title": "Map con funci\u00f3n definida",
            "code": "(define (cuadrado x) (* x x))\n(map cuadrado '(1 2 3)) ; Resultado: '(1 4 9)"
          },
          {
            "title": "Filter con condici\u00f3n",
            "code": "(filter (lambda (x) (> x 5)) '(3 6 2 7)) ; Resultado: '(6 7)"
          },
          {
            "title": "Combinar map y filter",
            "code": "(map add1 (filter odd? '(1 2 3 4))) ; Resultado: '(2 4)"
          }
        ],
        "ocaml": [
          {
            "title": "Aplicar map para duplicar",
            "code": "List.map (fun x -> x * 2) [1; 2; 3] ;; ; Resultado: [2; 4; 6]"
          },
          {
            "title": "Filtrar n\u00fameros pares",
            "code": "List.filter (fun x -> x mod 2 = 0) [1; 2; 3; 4] ;; ; Resultado: [2; 4]"
          },
          {
            "title": "Map con funci\u00f3n definida",
            "code": "let cuadrado x = x * x ;;\nList.map cuadrado [1; 2; 3] ;; ; Resultado: [1; 4; 9]"
          },
          {
            "title": "Filter con condici\u00f3n",
            "code": "List.filter (fun x -> x > 5) [3; 6; 2; 7] ;; ; Resultado: [6; 7]"
          },
          {
            "title": "Combinar map y filter",
            "code": "List.map (fun x -> x + 1) (List.filter (fun x -> x mod 2 <> 0) [1; 2; 3; 4]) ;; ; Resultado: [2; 4]"
          }
        ]
      }
    }
  },
  {
    "tipos-datos-simples": {
      "title": "9. Tipos de datos simples",
      "description": "Los tipos de datos simples, como tuplas y registros, son como cajas etiquetadas para guardar información relacionada, como los datos de un contacto. En este módulo, aprenderás a usar tuplas y registros en Racket y OCaml para organizar datos de manera clara y funcional. Imagina que eres alguien que nunca ha usado una computadora para crear instrucciones automáticas, como un niño que juega con bloques de construcción. Aquí, aprenderás paso a paso, usando ejemplos de la vida diaria, como cocinar o organizar tu habitación, para que entiendas cómo estas ideas funcionan sin necesidad de conocimiento técnico previo. Por ejemplo, piensa en cómo sigues una rutina diaria: cada parte es simple, pero juntas forman algo útil. Esto es similar a cómo se construyen los programas en estos lenguajes, asegurando que todo sea confiable y fácil de seguir.",
      "learning_objectives": [
        "Entender qué son tuplas y registros.",
        "Crear y usar estos tipos de datos en Racket y OCaml.",
        "Organizar información estructurada de manera efectiva."
      ],
      "key_concepts": ["Tuplas", "Registros", "Datos estructurados"],
      "subsections": [
        {
          "title": "Tuplas",
          "content": "Una tupla es como una pequeña caja con compartimentos fijos, donde guardas datos relacionados, como el nombre y la edad de una persona. En Racket y OCaml, las tuplas son inmutables y se usan para agrupar datos simples. Para alguien que no sabe nada de tecnología, esto es como aprender a usar un juguete nuevo: al principio parece complicado, pero con ejemplos simples como contar juguetes o agrupar colores, verás cómo se aplica. Recuerda, no necesitas saber de computadoras; solo imagina escenarios cotidianos donde repites acciones o tomas decisiones basadas en lo que ves alrededor.",
          "examples": [
            {
              "title": "Datos de una persona",
              "description": "Una tupla con (nombre, edad) como ('Ana', 25) es como una tarjeta con la información básica de alguien. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            },
            {
              "title": "Coordenadas de un mapa",
              "description": "Una tupla (x, y) como (3, 5) representa un punto en un mapa, agrupando dos valores relacionados. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            }
          ],
          "image": {
            "url": "tipos-datos-simples.jpg",
            "caption": "Representación de una tupla como una caja de datos."
          }
        },
        {
          "title": "Registros",
          "content": "Un registro es como un formulario con campos etiquetados, como nombre, dirección y teléfono. En Racket y OCaml, los registros permiten organizar datos con nombres claros, facilitando su uso en programas. Para alguien que no sabe nada de tecnología, esto es como aprender a usar un juguete nuevo: al principio parece complicado, pero con ejemplos simples como contar juguetes o agrupar colores, verás cómo se aplica. Recuerda, no necesitas saber de computadoras; solo imagina escenarios cotidianos donde repites acciones o tomas decisiones basadas en lo que ves alrededor.",
          "examples": [
            {
              "title": "Ficha de un estudiante",
              "description": "Un registro con {nombre: 'Juan', curso: 'Matemáticas'} es como una ficha escolar que organiza información. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            },
            {
              "title": "Detalles de un producto",
              "description": "Un registro con {nombre: 'Laptop', precio: 1000} es como una etiqueta que describe un producto en una tienda. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            }
          ],
          "image": {
            "url": "tipos-datos-simples-2.jpg",
            "caption": "Ejemplo de un registro como un formulario estructurado."
          }
        }
      ],
      "codigos": {
        "racket": [
          {
            "title": "Crear una tupla (pair)",
            "code": "(cons 'Ana 25) ; Resultado: '(Ana . 25)"
          },
          {
            "title": "Acceder al primer elemento de tupla",
            "code": "(car (cons 'Ana 25)) ; Resultado: 'Ana"
          },
          {
            "title": "Acceder al segundo elemento de tupla",
            "code": "(cdr (cons 'Ana 25)) ; Resultado: 25"
          },
          {
            "title": "Definir una estructura (registro)",
            "code": "(struct: persona (nombre edad)) ; Resultado: define una estructura persona"
          },
          {
            "title": "Crear un registro",
            "code": "(persona \"Juan\" 30) ; Resultado: #<persona>"
          },
          {
            "title": "Acceder a campo de registro",
            "code": "(persona-nombre (persona \"Juan\" 30)) ; Resultado: \"Juan\""
          },
          {
            "title": "Verificar estructura",
            "code": "(persona? (persona \"Juan\" 30)) ; Resultado: #t"
          }
        ],
        "ocaml": [
          {
            "title": "Crear una tupla",
            "code": "(\"Ana\", 25) ;; ; Resultado: (\"Ana\", 25)"
          },
          {
            "title": "Acceder al primer elemento de tupla",
            "code": "fst (\"Ana\", 25) ;; ; Resultado: \"Ana\""
          },
          {
            "title": "Acceder al segundo elemento de tupla",
            "code": "snd (\"Ana\", 25) ;; ; Resultado: 25"
          },
          {
            "title": "Definir un tipo registro",
            "code": "type persona = { nombre : string; edad : int } ;; ; Resultado: define un tipo persona"
          },
          {
            "title": "Crear un registro",
            "code": "{ nombre = \"Juan\"; edad = 30 } ;; ; Resultado: {nombre = \"Juan\"; edad = 30}"
          },
          {
            "title": "Acceder a campo de registro",
            "code": "let p = { nombre = \"Juan\"; edad = 30 } in p.nombre ;; ; Resultado: \"Juan\""
          },
          {
            "title": "Pattern matching con tupla",
            "code": "let (n, e) = (\"Ana\", 25) in n ;; ; Resultado: \"Ana\""
          }
        ]
      }
    }
  },
  {
    "cadenas-y-caracteres": {
      "title": "10. Manejo de cadenas y caracteres",
      "description": "Las cadenas y caracteres son como las palabras y letras que usas para escribir mensajes. En este módulo, aprenderás a manipular texto en Racket y OCaml, realizando operaciones como unir palabras, cambiar letras o extraer partes de un texto. Imagina que eres alguien que nunca ha usado una computadora para crear instrucciones automáticas, como un niño que juega con bloques de construcción. Aquí, aprenderás paso a paso, usando ejemplos de la vida diaria, como cocinar o organizar tu habitación, para que entiendas cómo estas ideas funcionan sin necesidad de conocimiento técnico previo. Por ejemplo, piensa en cómo sigues una rutina diaria: cada parte es simple, pero juntas forman algo útil. Esto es similar a cómo se construyen los programas en estos lenguajes, asegurando que todo sea confiable y fácil de seguir.",
      "learning_objectives": [
        "Entender cómo funcionan las cadenas y caracteres.",
        "Realizar operaciones básicas con texto.",
        "Aplicar técnicas para manipular texto eficientemente."
      ],
      "key_concepts": ["Cadenas", "Caracteres", "Manipulación de texto"],
      "subsections": [
        {
          "title": "Cadenas y caracteres",
          "content": "Una cadena es una secuencia de caracteres, como una frase en un libro. Un carácter es una sola letra o símbolo. En Racket y OCaml, puedes trabajar con ambos para crear o modificar texto, como escribir un mensaje o corregir una palabra. Para alguien que no sabe nada de tecnología, esto es como aprender a usar un juguete nuevo: al principio parece complicado, pero con ejemplos simples como contar juguetes o agrupar colores, verás cómo se aplica. Recuerda, no necesitas saber de computadoras; solo imagina escenarios cotidianos donde repites acciones o tomas decisiones basadas en lo que ves alrededor.",
          "examples": [
            {
              "title": "Escribir un mensaje",
              "description": "Una cadena como 'Hola, mundo' es como escribir un saludo en una tarjeta. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            },
            {
              "title": "Corregir una letra",
              "description": "Cambiar la 'a' por una 'o' en 'casa' para obtener 'cosa' es como corregir un error tipográfico. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            }
          ],
          "image": {
            "url": "cadenas-y-caracteres.jpg",
            "caption": "Ilustración de cadenas como secuencias de texto."
          }
        },
        {
          "title": "Operaciones con texto",
          "content": "Puedes unir cadenas, extraer partes o compararlas, como combinar frases o buscar una palabra en un texto. Racket y OCaml ofrecen funciones para estas tareas, haciendo que el manejo de texto sea eficiente. Para alguien que no sabe nada de tecnología, esto es como aprender a usar un juguete nuevo: al principio parece complicado, pero con ejemplos simples como contar juguetes o agrupar colores, verás cómo se aplica. Recuerda, no necesitas saber de computadoras; solo imagina escenarios cotidianos donde repites acciones o tomas decisiones basadas en lo que ves alrededor.",
          "examples": [
            {
              "title": "Unir frases",
              "description": "Juntar 'Hola' y 'mundo' para obtener 'Hola mundo' es como pegar dos partes de un mensaje. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            },
            {
              "title": "Buscar una palabra",
              "description": "Extraer 'sol' de 'El sol brilla' es como buscar una palabra específica en una oración. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            }
          ],
          "image": {
            "url": "cadenas-y-caracteres-2.jpg",
            "caption": "Ejemplo de operaciones con cadenas de texto."
          }
        }
      ],
      "codigos": {
        "racket": [
          {
            "title": "Crear una cadena",
            "code": "\"Hola\" ; Resultado: \"Hola\""
          },
          {
            "title": "Unir cadenas",
            "code": "(string-append \"Hola\" \" mundo\") ; Resultado: \"Hola mundo\""
          },
          {
            "title": "Obtener longitud de cadena",
            "code": "(string-length \"Hola\") ; Resultado: 4"
          },
          {
            "title": "Extraer subcadena",
            "code": "(substring \"Hola mundo\" 0 4) ; Resultado: \"Hola\""
          },
          {
            "title": "Convertir a may\u00fasculas",
            "code": "(string-upcase \"hola\") ; Resultado: \"HOLA\""
          },
          {
            "title": "Convertir a min\u00fasculas",
            "code": "(string-downcase \"HOLA\") ; Resultado: \"hola\""
          },
          {
            "title": "Reemplazar en cadena",
            "code": "(string-replace \"casa\" \"a\" \"o\" #:all? #f) ; Resultado: \"cosa\""
          },
          {
            "title": "Verificar si contiene",
            "code": "(string-contains? \"Hola mundo\" \"mundo\") ; Resultado: #t"
          },
          {
            "title": "Crear car\u00e1cter",
            "code": "#\\a ; Resultado: #\\a"
          },
          {
            "title": "Convertir car\u00e1cter a cadena",
            "code": "(string #\\H #\\o #\\l #\\a) ; Resultado: \"Hola\""
          }
        ],
        "ocaml": [
          {
            "title": "Crear una cadena",
            "code": "\"Hola\" ;; ; Resultado: \"Hola\""
          },
          {
            "title": "Unir cadenas",
            "code": "\"Hola\" ^ \" mundo\" ;; ; Resultado: \"Hola mundo\""
          },
          {
            "title": "Obtener longitud de cadena",
            "code": "String.length \"Hola\" ;; ; Resultado: 4"
          },
          {
            "title": "Extraer subcadena",
            "code": "String.sub \"Hola mundo\" 0 4 ;; ; Resultado: \"Hola\""
          },
          {
            "title": "Convertir a may\u00fasculas",
            "code": "String.uppercase_ascii \"hola\" ;; ; Resultado: \"HOLA\""
          },
          {
            "title": "Convertir a min\u00fasculas",
            "code": "String.lowercase_ascii \"HOLA\" ;; ; Resultado: \"hola\""
          },
          {
            "title": "Reemplazar en cadena",
            "code": "String.map (fun c -> if c = 'a' then 'o' else c) \"casa\" ;; ; Resultado: \"coso\""
          },
          {
            "title": "Verificar si contiene",
            "code": "String.contains \"Hola mundo\" 'm' ;; ; Resultado: true (para caracter, para string usa String.contains_from)"
          },
          {
            "title": "Crear car\u00e1cter",
            "code": "'a' ;; ; Resultado: 'a'"
          },
          {
            "title": "Convertir car\u00e1cter a cadena",
            "code": "String.make 1 'H' ^ \"ola\" ;; ; Resultado: \"Hola\""
          }
        ]
      }
    }
  },
  {
    "composicion-de-funciones": {
      "title": "11. Composición de funciones",
      "description": "La composición de funciones es como encadenar pasos en una línea de producción: una función toma el resultado de otra para crear algo nuevo. En este módulo, aprenderás a combinar funciones en Racket y OCaml para construir soluciones más complejas a partir de funciones simples. Imagina que eres alguien que nunca ha usado una computadora para crear instrucciones automáticas, como un niño que juega con bloques de construcción. Aquí, aprenderás paso a paso, usando ejemplos de la vida diaria, como cocinar o organizar tu habitación, para que entiendas cómo estas ideas funcionan sin necesidad de conocimiento técnico previo. Por ejemplo, piensa en cómo sigues una rutina diaria: cada parte es simple, pero juntas forman algo útil. Esto es similar a cómo se construyen los programas en estos lenguajes, asegurando que todo sea confiable y fácil de seguir.",
      "learning_objectives": [
        "Entender qué es la composición de funciones.",
        "Combinar funciones para resolver problemas.",
        "Aplicar composición en ejemplos prácticos."
      ],
      "key_concepts": ["Composición de funciones", "Encadenamiento"],
      "subsections": [
        {
          "title": "Qué es la composición",
          "content": "Componer funciones es como usar el resultado de una receta como ingrediente para otra. En Racket y OCaml, puedes definir una función que toma el output de otra función para producir un nuevo resultado, simplificando procesos complejos. Para alguien que no sabe nada de tecnología, esto es como aprender a usar un juguete nuevo: al principio parece complicado, pero con ejemplos simples como contar juguetes o agrupar colores, verás cómo se aplica. Recuerda, no necesitas saber de computadoras; solo imagina escenarios cotidianos donde repites acciones o tomas decisiones basadas en lo que ves alrededor.",
          "examples": [
            {
              "title": "Preparar un postre",
              "description": "Primero haces un bizcocho (función 1), luego lo decoras con crema (función 2). Componerlas es usar el bizcocho como base para el postre final. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            },
            {
              "title": "Planificar un viaje",
              "description": "Una función calcula la distancia a recorrer, y otra estima el tiempo. Componerlas te da el tiempo total directamente. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            }
          ],
          "image": {
            "url": "composicion-de-funciones.jpg",
            "caption": "Diagrama de cómo se encadenan funciones en composición."
          }
        },
        {
          "title": "Aplicaciones de la composición",
          "content": "La composición permite crear programas más claros y reutilizables, como conectar máquinas en una fábrica. En Racket y OCaml, usas composición para combinar funciones que transforman datos de manera secuencial. Para alguien que no sabe nada de tecnología, esto es como aprender a usar un juguete nuevo: al principio parece complicado, pero con ejemplos simples como contar juguetes o agrupar colores, verás cómo se aplica. Recuerda, no necesitas saber de computadoras; solo imagina escenarios cotidianos donde repites acciones o tomas decisiones basadas en lo que ves alrededor.",
          "examples": [
            {
              "title": "Procesar un pedido",
              "description": "Una función calcula el costo, otra aplica un descuento. Componerlas te da el precio final en un solo paso. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            },
            {
              "title": "Editar una foto",
              "description": "Una función ajusta el brillo, otra añade un filtro. Componerlas aplica ambos efectos en orden automáticamente. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            }
          ],
          "image": {
            "url": "composicion-de-funciones-2.jpg",
            "caption": "Ejemplo de composición en un flujo de trabajo."
          }
        }
      ],
      "codigos": {
        "racket": [
          {
            "title": "Componer dos funciones",
            "code": "(define (compose f g) (lambda (x) (f (g x)))) ; Resultado: funci\u00f3n que compone f y g"
          },
          {
            "title": "Usar compose con add1 y sqr",
            "code": "((compose sqr add1) 3) ; Resultado: 16 (sqr (add1 3) = 4^2)"
          },
          {
            "title": "Composici\u00f3n m\u00faltiple",
            "code": "(define (compose3 f g h) (lambda (x) (f (g (h x))))) ; Resultado: composici\u00f3n de tres funciones"
          },
          {
            "title": "Aplicar composici\u00f3n m\u00faltiple",
            "code": "((compose3 sqr add1 sub1) 5) ; Resultado: 16 (sqr (add1 (sub1 5)) = 5)"
          },
          {
            "title": "Composici\u00f3n con identity",
            "code": "(define (identity x) x)\n((compose sqr identity) 4) ; Resultado: 16"
          }
        ],
        "ocaml": [
          {
            "title": "Componer dos funciones",
            "code": "let compose f g x = f (g x) ;; ; Resultado: funci\u00f3n que compone f y g"
          },
          {
            "title": "Usar compose con succ y cuadrado",
            "code": "let cuadrado x = x * x ;;\ncompose cuadrado succ 3 ;; ; Resultado: 16 (cuadrado (succ 3) = 4*4)"
          },
          {
            "title": "Composici\u00f3n m\u00faltiple",
            "code": "let compose3 f g h x = f (g (h x)) ;; ; Resultado: composici\u00f3n de tres funciones"
          },
          {
            "title": "Aplicar composici\u00f3n m\u00faltiple",
            "code": "compose3 cuadrado succ pred 5 ;; ; Resultado: 16 (cuadrado (succ (pred 5)) = 5*5? Espera, pred 5 = 4, succ 4 = 5, cuadrado 5 = 25)"
          },
          {
            "title": "Composici\u00f3n con identity",
            "code": "let identity x = x ;;\ncompose cuadrado identity 4 ;; ; Resultado: 16"
          }
        ]
      }
    }
  },
  {
    "procesamiento-listas": {
      "title": "12. Aplicación práctica: Procesamiento de listas",
      "description": "En este módulo, combinarás recursión, `map` y `filter` para resolver problemas con listas, como clasificar tareas o calcular totales. Aprenderás a aplicar estos conceptos en Racket y OCaml para manejar colecciones de datos de manera práctica y eficiente. Imagina que eres alguien que nunca ha usado una computadora para crear instrucciones automáticas, como un niño que juega con bloques de construcción. Aquí, aprenderás paso a paso, usando ejemplos de la vida diaria, como cocinar o organizar tu habitación, para que entiendas cómo estas ideas funcionan sin necesidad de conocimiento técnico previo. Por ejemplo, piensa en cómo sigues una rutina diaria: cada parte es simple, pero juntas forman algo útil. Esto es similar a cómo se construyen los programas en estos lenguajes, asegurando que todo sea confiable y fácil de seguir.",
      "learning_objectives": [
        "Aplicar recursión, `map` y `filter` en problemas reales.",
        "Procesar listas de manera funcional.",
        "Resolver problemas complejos combinando conceptos aprendidos."
      ],
      "key_concepts": [
        "Procesamiento de listas",
        "Recursión",
        "`map`",
        "`filter`"
      ],
      "subsections": [
        {
          "title": "Procesamiento con recursión",
          "content": "La recursión te permite trabajar con listas dividiendo el problema en partes, como revisar una lista de tareas una por una. En Racket y OCaml, usas recursión para procesar listas sin modificarlas, asegurando un enfoque funcional. Para alguien que no sabe nada de tecnología, esto es como aprender a usar un juguete nuevo: al principio parece complicado, pero con ejemplos simples como contar juguetes o agrupar colores, verás cómo se aplica. Recuerda, no necesitas saber de computadoras; solo imagina escenarios cotidianos donde repites acciones o tomas decisiones basadas en lo que ves alrededor.",
          "examples": [
            {
              "title": "Revisar una lista de compras",
              "description": "Recorrer una lista de compras para sumar precios es como usar recursión: revisas un ítem, sumas su costo, y sigues con el resto. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            },
            {
              "title": "Contar asistentes",
              "description": "Contar cuántas personas hay en una lista de invitados es como usar recursión para sumar uno por uno hasta terminar. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            }
          ],
          "image": {
            "url": "procesamiento-listas.jpg",
            "caption": "Ilustración de recursión aplicada a una lista."
          }
        },
        {
          "title": "Uso de `map` y `filter`",
          "content": "Con `map` y `filter`, puedes transformar o seleccionar elementos de una lista rápidamente, como ajustar precios o elegir tareas urgentes. Estas funciones hacen que el procesamiento de listas sea más simple y directo. Para alguien que no sabe nada de tecnología, esto es como aprender a usar un juguete nuevo: al principio parece complicado, pero con ejemplos simples como contar juguetes o agrupar colores, verás cómo se aplica. Recuerda, no necesitas saber de computadoras; solo imagina escenarios cotidianos donde repites acciones o tomas decisiones basadas en lo que ves alrededor.",
          "examples": [
            {
              "title": "Ajustar un presupuesto",
              "description": "Usar `map` para aumentar un 10% los precios de una lista de productos es como actualizar un presupuesto automáticamente. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            },
            {
              "title": "Seleccionar tareas urgentes",
              "description": "Usar `filter` para quedarte con las tareas marcadas como urgentes es como elegir solo lo importante de una lista de pendientes. Este ejemplo te ayuda a ver cómo, en tu vida diaria, haces algo similar sin darte cuenta, haciendo que el concepto sea accesible incluso si nunca has oído hablar de programación."
            }
          ],
          "image": {
            "url": "procesamiento-listas-2.jpg",
            "caption": "Ejemplo de `map` y `filter` procesando una lista."
          }
        }
      ],
      "codigos": {
        "racket": [
          {
            "title": "Suma recursiva de lista",
            "code": "(define (suma-rec lista)\n  (if (empty? lista)\n      0\n      (+ (first lista) (suma-rec (rest lista))))) ; Resultado: funci\u00f3n para sumar lista"
          },
          {
            "title": "Usar suma recursiva",
            "code": "(suma-rec '(1 2 3)) ; Resultado: 6"
          },
          {
            "title": "Procesar con map y filter",
            "code": "(map add1 (filter even? '(1 2 3 4))) ; Resultado: '(3 5)"
          },
          {
            "title": "Fold para suma",
            "code": "(foldl + 0 '(1 2 3)) ; Resultado: 6"
          },
          {
            "title": "Recursi\u00f3n para longitud",
            "code": "(define (len-rec lista)\n  (if (empty? lista)\n      0\n      (+ 1 (len-rec (rest lista))))) ; Resultado: funci\u00f3n para longitud"
          },
          {
            "title": "Usar longitud recursiva",
            "code": "(len-rec '(a b c)) ; Resultado: 3"
          }
        ],
        "ocaml": [
          {
            "title": "Suma recursiva de lista",
            "code": "let rec suma_rec lista =\n  match lista with\n  | [] -> 0\n  | hd :: tl -> hd + suma_rec tl ;; ; Resultado: funci\u00f3n para sumar lista"
          },
          {
            "title": "Usar suma recursiva",
            "code": "suma_rec [1; 2; 3] ;; ; Resultado: 6"
          },
          {
            "title": "Procesar con map y filter",
            "code": "List.map (fun x -> x + 1) (List.filter (fun x -> x mod 2 = 0) [1; 2; 3; 4]) ;; ; Resultado: [3; 5]"
          },
          {
            "title": "Fold para suma",
            "code": "List.fold_left (+) 0 [1; 2; 3] ;; ; Resultado: 6"
          },
          {
            "title": "Recursi\u00f3n para longitud",
            "code": "let rec len_rec lista =\n  match lista with\n  | [] -> 0\n  | _ :: tl -> 1 + len_rec tl ;; ; Resultado: funci\u00f3n para longitud"
          },
          {
            "title": "Usar longitud recursiva",
            "code": "len_rec [\"a\"; \"b\"; \"c\"] ;; ; Resultado: 3"
          }
        ]
      }
    }
  }
]
